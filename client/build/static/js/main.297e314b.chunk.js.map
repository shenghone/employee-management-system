{"version":3,"sources":["components/queries/queries.jsx","components/navbar/navbar.jsx","components/searchBar/searchBar.jsx","components/employees/employees.jsx","components/employees/employee/employee.jsx","util/util.js","components/schema/schema.jsx","components/employees/employee/employeeForm/employeeForm.jsx","components/projects/projects.jsx","components/projects/project/project.jsx","components/projects/project/projectForm/projectForm.jsx","components/projects/newProject/newProjectForm.jsx","components/teams/teams.jsx","components/teams/team/team.jsx","components/teams/team/teamForm/teamForm.jsx","components/teams/newTeam/newTeam.jsx","components/register/register.jsx","components/footer/footer.jsx","components/home/home.jsx","components/about/about.jsx","components/privatedRoute/privateRoute.jsx","components/login/login.jsx","components/errorPage/errorPage.jsx","App.js","serviceWorker.js","index.js"],"names":["signUpMutation","gql","_templateObject","loginMutation","_templateObject2","signOutMutation","_templateObject3","createTeamMutation","_templateObject4","updateTeamMutation","_templateObject5","updateProjectMutation","_templateObject6","updateEmployeeMutation","_templateObject7","createProjectMutation","_templateObject8","employeeEmailsQuery","_templateObject9","employeesQuery","_templateObject10","teamsQuery","_templateObject11","teamQuery","_templateObject12","meQuery","_templateObject13","projectsQuery","_templateObject14","projectQuery","_templateObject15","employeeQuery","_templateObject16","positionsQuery","_templateObject17","navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","classType","authenticated","toggleBurgerClass","state","authStatus","setState","burgerClassIndicator","signOut","changeAuthStatusFromNav","history","push","console","log","err","arg","changeAuthCallFromChild","currentUrl","location","pathname","react_default","a","createElement","className","onClick","NavLink","activeClassName","exact","to","Component","compose","withRouter","graphql","name","searchBar","_this2","type","placeholder","displayedMessage","onChange","event","search","target","value","id","employees","userInput","changeVisibilityFromChild","visibility","toViewEmployee","concat","toSortByName","sortByName","sortByPosition","sortByHireDate","toSoryByPosition","toSortByHireDate","backToDefault","selectedEmployee","data","loading","filteredEmployee","Employees","filter","Employee","FirstName","toUpperCase","indexOf","LastName","Position","PositionName","_this$state","_","sortBy","reverse","emp","dayjs","HireDate","searchBar_searchBar_searchBar","map","key","parseInt","add","toDate","getTimezoneOffset","format","AddressStreet","AddressCity","AddressState","AddressZip","employee","toEditEmployee","match","params","employeeId","_this$props$employeeQ","Email","PhoneNum","Extension","SalaryBonus","options","variables","parseDate","temp","year","substring","month","day","dateFormat","Yup","array","message","test","exclusive","resolve","includes","TeamName","trim","min","max","required","Projects","TeamLead","notInEmp","CreateTeam","shape","UpdateTeam","CreateProject","ProjectStartDate","matches","val","ProjectName","ProjectDescription","str","split","length","UpdateProjectSchema","prevStartDate","prevEndDate","notRequired","Username","email","UpdateEmployeeSchema","nullable","SingUpSchema","Password","employeeForm","exitEmployeeForm","currentEmployee","formVisibility","Positions","formik_esm","initialValues","validationSchema","onSubmit","_ref2","asyncToGenerator","regenerator_default","mark","_callee","values","_ref","setSubmitting","wrap","_context","prev","next","refetchQueries","query","sent","stop","_x","_x2","apply","arguments","render","_ref3","errors","setFieldValue","status","touched","isSubmitting","errorMessage","readOnly","position","projects","selectProject","projectId","selectedProject","toViewProject","createNewProject","filteredProjects","project","ProjectEndDate","startEditingProject","toExit","_this$props$projectQu","Project","projectForm","exitProjectForm","checkProjectName","ProjectArray","projectNameFound","p","undefined","ProjEndDate","setFieldError","setFieldTouched","onBlur","used","component","disabled","newProjectForm","exitNewProjectForm","projectFound","isSumitting","teams","viewTeam","addNewTeam","filteredTeams","Teams","Team","team","index","exitTeam","toEditTeam","teamId","_this$props$teamQuery","teamForm","exitTeamForm","handleSearch","toSortByPosition","checkIfNameIsUsed","TeamsObj","found","t","TeamId","filteredEmp","filteredProject","m","EmployeeIds","ProjectIds","TeamLeadId","handleBlur","isEmpty","checked","newEmpIds","newProjectIds","newTeam","exitNewTeamForm","foundObj","TeamObj","currentTeam","register","backToMain","checkEmail","emailArray","defaultAuth","EmployeeEmails","EmailsArray","e","Redirect","changeAuthStatus","nextProps","prevState","footer","PureComponent","home","getTextColor","about","aboutPageTheme","index_es","duration","triggerHook","offset","triggerElement","dist_index_es","from","xPercent","autoAlpha","x","href","rel","ease","rest","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","loaded","setLoaded","useEffect","Route","assign","Me","login","checkAuthStatus","authentication","handleChange","defineProperty","verifyAuthStatus","setErrorMessage","submitForm","suc","preventDefault","defaultAccount","password","defaultPassword","t0","errorPage","App","connecToServer","fetch","checkAuth","prevProps","BrowserRouter","components_navbar_navbar","Switch","path","components_login_login","components_register_register","Home","components_about_about","privatedRoute_privateRoute","TeamForm","NewTeam","NewProject","ProjectForm","EmployeeForm","ErrorPage","components_footer_footer","Boolean","window","hostname","client","ApolloClient","link","createHttpLink","uri","process","credentials","cache","InMemoryCache","ReactDOM","react_apollo_esm","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.297e314b.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\n//mutations\nconst signUpMutation = gql`\n  mutation SignUp(\n    $AddressStreet: String!\n    $AddressState: String!\n    $AddressCity: String!\n    $AddressZip: String!\n    $Password: String!\n    $Email: String!\n    $Username: String!\n    $Position: ID!\n    $PhoneNum: String!\n    $HireDate: String!\n    $Extension: Int\n    $FirstName: String!\n    $LastName: String!\n  ) {\n    SignUp(\n      AddressStreet: $AddressStreet\n      AddressState: $AddressState\n      FirstName: $FirstName\n      LastName: $LastName\n      AddressCity: $AddressCity\n      AddressZip: $AddressZip\n      Password: $Password\n      Email: $Email\n      Username: $Username\n      Position: $Position\n      PhoneNum: $PhoneNum\n      HireDate: $HireDate\n      Extension: $Extension\n    ) {\n      id\n      FirstName\n    }\n  }\n`;\n\n/*\n    AddressStreet:$AddressStreet,\n     AddressState:$AddressState,\n     FirstName:$FirstName,\n     LastName:$LastName,\n\n     AddressCity:$AddressCity,\n     AddressZip:$AddressZip,\n     Password:$Password,\n     Email:$Email,\n     Username:$Username,\n     Position:$ Position,\n     PhoneNum:$PhoneNum,\n     HireDate:$HireDat,\n     Extension:$Extension,\n     FirstName:$FirstName,\n     LastName:$LastName,\n\n*/\n\nconst loginMutation = gql`\n  mutation($email: String!, $password: String!) {\n    SignIn(Email: $email, Password: $password) {\n      FirstName\n      LastName\n      Email\n    }\n  }\n`;\n\nconst signOutMutation = gql`\n  mutation {\n    SignOut\n  }\n`;\n\nconst createTeamMutation = gql`\n  mutation CreateTeam(\n    $TeamName: String!\n    $ProjectIds: [ID!]!\n    $EmployeeIds: [ID!]!\n    $TeamLeadId: ID!\n  ) {\n    CreateTeam(\n      TeamName: $TeamName\n      ProjectIds: $ProjectIds\n      EmployeeIds: $EmployeeIds\n      TeamLeadId: $TeamLeadId\n    ) {\n      id\n      TeamName\n    }\n  }\n`;\n\nconst updateTeamMutation = gql`\n  mutation UpdateTeam(\n    $id: ID!\n    $TeamName: String!\n    $ProjectIds: [ID!]!\n    $EmployeeIds: [ID!]!\n    $TeamLeadId: ID!\n  ) {\n    UpdateTeam(\n      id: $id\n      TeamName: $TeamName\n      EmployeeIds: $EmployeeIds\n      TeamLeadId: $TeamLeadId\n      ProjectIds: $ProjectIds\n    ) {\n      id\n      TeamName\n      Employees {\n        id\n      }\n      Projects {\n        id\n      }\n    }\n  }\n`;\n\nconst updateProjectMutation = gql`\n  mutation UpdateProject(\n    $id: ID!\n    $ProjectName: String!\n    $ProjectDescription: String!\n    $ProjectStartDate: String!\n    $ProjectEndDate: String!\n  ) {\n    UpdateProject(\n      id: $id\n      ProjectDescription: $ProjectDescription\n      ProjectStartDate: $ProjectStartDate\n      ProjectName: $ProjectName\n      ProjectEndDate: $ProjectEndDate\n    ) {\n      id\n      ProjectStartDate\n      ProjectEndDate\n      ProjectDescription\n      ProjectName\n    }\n  }\n`;\n\nconst updateEmployeeMutation = gql`\n  mutation UpdateEmployee(\n    $id: ID!\n    $HireDate: String!\n    $AddressStreet: String!\n    $AddressCity: String!\n    $AddressState: String!\n    $AddressZip: String!\n    $PhoneNum: String!\n    $Extension: Int!\n    $FirstName: String!\n    $LastName: String!\n    $SalaryBonus: Int!\n    $Email: String!\n    $Username: String!\n    $Position: String!\n  ) {\n    UpdateEmployee(\n      id: $id\n      Position: $Position\n      AddressStreet: $AddressStreet\n      AddressCity: $AddressCity\n      AddressState: $AddressState\n      AddressZip: $AddressZip\n      PhoneNum: $PhoneNum\n      Extension: $Extension\n      Email: $Email\n      SalaryBonus: $SalaryBonus\n      HireDate: $HireDate\n      Username: $Username\n      FirstName: $FirstName\n      LastName: $LastName\n    ) {\n      id\n      AddressStreet\n      AddressCity\n      AddressState\n      AddressZip\n      PhoneNum\n      Extension\n      Email\n      SalaryBonus\n      HireDate\n      Username\n      FirstName\n      LastName\n    }\n  }\n`;\n\nconst createProjectMutation = gql`\n  mutation CreateProject(\n    $ProjectName: String!\n    $ProjectDescription: String!\n    $ProjectStartDate: String!\n  ) {\n    CreateProject(\n      ProjectName: $ProjectName\n      ProjectDescription: $ProjectDescription\n      ProjectStartDate: $ProjectStartDate\n    ) {\n      id\n      ProjectName\n      ProjectDescription\n      ProjectStartDate\n    }\n  }\n`;\n\n//queries\n\n/*const positionQuery = gql`\n  query($id: String!) {\n    Position(id: $id) {\n      id\n      PositionName\n      PositionBaseSalary\n      PositionDescription\n    }\n  }\n`;*/\n\nconst employeeEmailsQuery = gql`\n  query {\n    EmployeeEmails {\n      Email\n    }\n  }\n`;\nconst employeesQuery = gql`\n  {\n    Employees {\n      id\n      Position {\n        id\n        PositionDescription\n        PositionBaseSalary\n        PositionName\n      }\n      FirstName\n      LastName\n      AddressStreet\n      AddressState\n      AddressCity\n      AddressZip\n      Email\n      Username\n      PhoneNum\n      Extension\n      HireDate\n      SalaryBonus\n      createdAt\n      updatedAt\n    }\n  }\n`;\nconst teamsQuery = gql`\n  {\n    Teams {\n      id\n      TeamName\n      TeamLead {\n        FirstName\n        LastName\n      }\n      Projects {\n        ProjectName\n        id\n      }\n      Employees {\n        FirstName\n        LastName\n      }\n    }\n  }\n`;\n\nconst teamQuery = gql`\n  query($id: String!) {\n    Team(id: $id) {\n      id\n      TeamName\n      TeamLead {\n        id\n        FirstName\n        LastName\n      }\n      Projects {\n        ProjectName\n        ProjectDescription\n        id\n      }\n      Employees {\n        id\n        FirstName\n        LastName\n      }\n    }\n  }\n`;\n\nconst meQuery = gql`\n  {\n    Me {\n      FirstName\n      LastName\n      Email\n      Position {\n        PositionDescription\n      }\n    }\n  }\n`;\n\nconst projectsQuery = gql`\n  {\n    Projects {\n      id\n      ProjectName\n      ProjectDescription\n      ProjectStartDate\n      ProjectEndDate\n    }\n  }\n`;\n\nconst projectQuery = gql`\n  query($id: ID!) {\n    Project(id: $id) {\n      id\n      ProjectName\n      ProjectDescription\n      ProjectStartDate\n      ProjectEndDate\n    }\n  }\n`;\n\nconst employeeQuery = gql`\n  query($id: ID!) {\n    Employee(id: $id) {\n      FirstName\n      LastName\n      id\n      SalaryBonus\n      Email\n      Username\n      AddressStreet\n      AddressCity\n      AddressState\n      AddressZip\n      Position {\n        id\n        PositionDescription\n        PositionBaseSalary\n        PositionName\n      }\n      Extension\n      HireDate\n      PhoneNum\n      Extension\n    }\n  }\n`;\n\nconst positionsQuery = gql`\n  {\n    Positions {\n      id\n      PositionName\n      PositionBaseSalary\n      PositionDescription\n    }\n  }\n`;\n\nexport {\n  loginMutation,\n  signOutMutation,\n  meQuery,\n  employeeQuery,\n  employeeEmailsQuery,\n  employeesQuery,\n  updateEmployeeMutation,\n  projectQuery,\n  projectsQuery,\n  updateProjectMutation,\n  createProjectMutation,\n  teamsQuery,\n  teamQuery,\n  updateTeamMutation,\n  createTeamMutation,\n  positionsQuery,\n  signUpMutation\n};\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { graphql, compose } from \"react-apollo\";\nimport { signOutMutation } from \"../queries/queries\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./navbar.css\";\n\nclass navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authStatus: this.props.authenticated,\n      burgerClassIndicator: false,\n      currentUrl: props.location.pathname\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.authenticated !== state.authStatus) {\n      return {\n        authStatus: props.authenticated\n      };\n    }\n    if (props.location !== state.location) {\n      return { currentUrl: props.location.pathname };\n    }\n    return null;\n  }\n\n  classType = () => {\n    if (!this.props.authenticated) {\n      return \"NavClass whiteNav\";\n    } else {\n      return \"NavClass darkNav\";\n    }\n  };\n\n  toggleBurgerClass = () => {\n    if (this.state.authStatus) {\n      this.setState({ burgerClassIndicator: !this.state.burgerClassIndicator });\n    } else {\n      this.setState({ burgerClassIndicator: true });\n    }\n  };\n\n  signOut = () => {\n    try {\n      const suc = this.props.signOutMutation({});\n      if (suc) {\n        this.changeAuthStatusFromNav(false);\n        this.props.history.push(\"/\");\n        console.log(\"logged out\");\n      }\n    } catch (err) {}\n  };\n\n  changeAuthStatusFromNav = arg => {\n    this.props.changeAuthCallFromChild(arg);\n  };\n\n  render() {\n    const { authStatus } = this.state;\n\n    if (authStatus) {\n      return (\n        <div className=\"navbarWrapper whiteNav\">\n          <div\n            className={\n              this.state.burgerClassIndicator ? \"burger clicked\" : \"burger\"\n            }\n            onClick={this.toggleBurgerClass}\n          >\n            <span className=\"line line1\" />\n            <span className=\"line line2\" />\n            <span className=\"line line3\" />\n          </div>\n          <ul>\n            <NavLink\n              activeClassName=\"activeClass\"\n              exact\n              className={this.classType()}\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n            <NavLink\n              activeClassName=\"activeClass\"\n              className={this.classType()}\n              to=\"/employees\"\n            >\n              Employees\n            </NavLink>\n            <NavLink\n              activeClassName=\"activeClass\"\n              className={this.classType()}\n              to=\"/projects\"\n            >\n              Projects\n            </NavLink>\n            <NavLink\n              activeClassName=\"activeClass\"\n              className={this.classType()}\n              to=\"/teams\"\n            >\n              Teams\n            </NavLink>\n            <NavLink\n              activeClassName=\"activeClass\"\n              className={this.classType()}\n              to=\"/about\"\n            >\n              About\n            </NavLink>\n            <li className={this.classType()} onClick={this.signOut}>\n              Sign out\n            </li>\n          </ul>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"navbarWrapper\">\n          <ul>\n            <NavLink\n              exact\n              className=\"NavClass whiteNav\"\n              activeClassName=\"activeClass\"\n              to=\"/\"\n            >\n              Home\n            </NavLink>\n            <NavLink\n              exact\n              className=\"NavClass whiteNav\"\n              activeClassName=\"activeClass\"\n              to=\"/about\"\n            >\n              About\n            </NavLink>\n            <NavLink\n              exact\n              className=\"NavClass whiteNav\"\n              activeClassName=\"activeClass\"\n              to=\"/login\"\n            >\n              Sing in\n            </NavLink>\n            <NavLink\n              exact\n              className=\"NavClass whiteNav\"\n              activeClassName=\"activeClass\"\n              to=\"/signup\"\n            >\n              Sign up\n            </NavLink>\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(signOutMutation, { name: \"signOutMutation\" })\n)(navbar);\n","import React, { Component } from \"react\";\n\nimport \"./searchBar.css\";\n\nexport default class searchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"searchBarWrapper\">\n        <input\n          type=\"text\"\n          className=\"searchInput\"\n          placeholder={this.props.displayedMessage}\n          onChange={event => this.props.search(event.target.value)}\n        />\n        <button className=\"searchButton\">\n          <i className=\"fas fa-search\" id=\"icon\" />\n        </button>\n        <p id=\"searchText\">search</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { employeesQuery } from \"../queries/queries\";\nimport dayjs from \"dayjs\";\nimport { withRouter } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport SearchBar from \"../searchBar/searchBar\";\nimport \"./employees.css\";\n\nclass employees extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedEmployee: null,\n      visibility: false,\n      userInput: \"\",\n      sortByName: \"default\",\n      sortByPosition: \"default\",\n      sortByHireDate: \"default\"\n    };\n  }\n\n  search = arg => {\n    this.setState({ userInput: arg });\n  };\n\n  changeVisibilityFromChild = arg => {\n    this.setState({ visibility: arg });\n  };\n\n  toViewEmployee = arg => {\n    return this.props.history.push(`/employee/${arg}`);\n  };\n\n  toSortByName = () => {\n    this.setState({\n      sortByName: !this.state.sortByName,\n      sortByPosition: \"default\",\n      sortByHireDate: \"default\"\n    });\n  };\n\n  toSoryByPosition = () => {\n    this.setState({\n      sortByPosition: !this.state.sortByPosition,\n      sortByName: \"default\",\n      sortByHireDate: \"default\"\n    });\n  };\n\n  toSortByHireDate = () => {\n    this.setState({\n      sortByPosition: \"default\",\n      sortByName: \"default\",\n      sortByHireDate: !this.state.sortByHireDate\n    });\n  };\n\n  backToDefault = () => {\n    this.setState({\n      sortByPosition: \"default\",\n      sortByName: \"default\",\n      sortByHireDate: \"default\"\n    });\n  };\n\n  render() {\n    if (!this.props.data || this.props.data.loading) {\n      return null;\n    }\n\n    const { data } = this.props;\n    let filteredEmployee = this.props.data.Employees.filter(Employee => {\n      return (\n        Employee.FirstName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        Employee.LastName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        (\n          Employee.FirstName.toUpperCase() +\n          \" \" +\n          Employee.LastName.toUpperCase()\n        ).indexOf(this.state.userInput.toUpperCase()) !== -1 ||\n        Employee.Position.PositionName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1\n      );\n    });\n\n    const { sortByName, sortByPosition, sortByHireDate } = this.state;\n    if (sortByName === true) {\n      filteredEmployee = _.sortBy(filteredEmployee, \"FirstName\");\n    } else if (sortByName === false) {\n      filteredEmployee = _.sortBy(filteredEmployee, \"FirstName\").reverse();\n    }\n\n    if (sortByPosition === true) {\n      filteredEmployee = _.sortBy(filteredEmployee, function(emp) {\n        return emp.Position.PositionName;\n      });\n    } else if (sortByPosition === false) {\n      filteredEmployee = _.sortBy(filteredEmployee, function(emp) {\n        return emp.Position.PositionName;\n      }).reverse();\n    }\n\n    if (sortByHireDate === true) {\n      filteredEmployee = _.sortBy(filteredEmployee, function(emp) {\n        return dayjs(emp.HireDate);\n      });\n    } else if (sortByHireDate === false) {\n      filteredEmployee = _.sortBy(filteredEmployee, function(emp) {\n        return dayjs(emp.HireDate);\n      }).reverse();\n    }\n\n    return (\n      <div className=\"tableWrapper\">\n        <div className=\"employeeSearchBar\">\n          <SearchBar\n            userInput={this.state.userInput}\n            displayedMessage={\"search by name/position\"}\n            search={this.search}\n          />\n        </div>\n\n        <div className=\"outterWrapper\">\n          <table className=\"tableClass\">\n            <thead className=\"tableHead\">\n              <tr className=\"headRow\">\n                <th\n                  className=\"tableHeader employeeFullName\"\n                  onClick={this.toSortByName}\n                  id={\n                    this.state.sortByName === \"default\"\n                      ? null\n                      : this.state.sortByName === true\n                      ? \"sorting-asc\"\n                      : \"sorting-desc\"\n                  }\n                >\n                  Name\n                </th>\n                <th\n                  className=\"tableHeader employeePosition\"\n                  onClick={this.toSoryByPosition}\n                  id={\n                    this.state.sortByPosition === \"default\"\n                      ? null\n                      : this.state.sortByPosition === true\n                      ? \"sorting-asc\"\n                      : \"sorting-desc\"\n                  }\n                >\n                  Position\n                </th>\n                <th\n                  className=\"tableHeader employeeHireDate\"\n                  onClick={this.toSortByHireDate}\n                  id={\n                    sortByHireDate === \"default\"\n                      ? null\n                      : sortByHireDate === true\n                      ? \"sortingDate-asc\"\n                      : \"sortingDate-desc\"\n                  }\n                >\n                  Hire Date\n                </th>\n                <th\n                  className=\"tableHeader employeeAddress\"\n                  onClick={this.backToDefault}\n                >\n                  Address\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"tableBody\">\n              {!data || data.loading ? (\n                <tr>\n                  <td>Data is loading...</td>\n                </tr>\n              ) : (\n                filteredEmployee.map(emp => {\n                  return (\n                    <tr\n                      key={emp.id}\n                      className=\"bodyRow\"\n                      onClick={() => {\n                        this.toViewEmployee(emp.id);\n                      }}\n                    >\n                      <td className=\"tableContent employeeFullName\">\n                        {emp.FirstName} {emp.LastName}\n                      </td>\n                      <td className=\"tableContent employeePosition\">\n                        {emp.Position.PositionName}\n                      </td>\n                      <td className=\"tableContent employeeHireDate\">\n                        {dayjs(parseInt(emp.HireDate))\n                          .add(\n                            dayjs(parseInt(emp.HireDate))\n                              .toDate()\n                              .getTimezoneOffset(),\n                            \"minute\"\n                          )\n                          .format(\"YYYY-MM-DD\")}\n                      </td>\n                      <td className=\"tableContent employeeAddress\">\n                        {emp.AddressStreet} {emp.AddressCity} {emp.AddressState}{\" \"}\n                        {emp.AddressZip}\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(employeesQuery)\n)(employees);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\nimport { employeeQuery } from \"../../queries/queries\";\nimport dayjs from \"dayjs\";\n\nimport \"./employee.css\";\n\nclass employee extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedEmployee: this.props.match.params.employeeId\n    };\n  }\n\n  toEditEmployee = arg => {\n    this.props.history.push(`/employee/edit/${arg}`);\n  };\n\n  render() {\n    console.log(this.props.match.params.employeeId);\n    console.log(this.state.selectedEmployee);\n\n    if (!this.props.employeeQuery || this.props.employeeQuery.loading) {\n      return null;\n    }\n    const {\n      FirstName,\n      LastName,\n      AddressStreet,\n      AddressState,\n      AddressCity,\n      AddressZip,\n      Email,\n      PhoneNum,\n      Extension,\n      HireDate,\n      SalaryBonus,\n      id\n    } = this.props.employeeQuery.Employee;\n    const { PositionName } = this.props.employeeQuery.Employee.Position;\n    return (\n      <div className=\"employeeWrapper\">\n        <div\n          className=\"statusBar\"\n          onClick={() => {\n            this.props.history.push(`/employees`);\n          }}\n        />\n        <div className=\"infoLeft\">\n          <div className=\"employeeName\">\n            {FirstName} <br />\n            {LastName}\n          </div>\n          <button\n            onClick={() => {\n              this.toEditEmployee(this.state.selectedEmployee);\n            }}\n            id=\"employeeEditButton\"\n            className=\"edit\"\n          >\n            Edit\n          </button>\n        </div>\n        <div className=\"infoRight\">\n          <p>\n            <b>ID:</b> {id}\n          </p>\n          <p>\n            <b>Position:</b> {PositionName}\n          </p>\n          <p>\n            <b>Address:</b> {AddressStreet} {AddressCity} {AddressState}{\" \"}\n            {AddressZip}\n          </p>\n          <p>\n            <b>Email:</b> {Email}\n          </p>\n\n          <p>\n            <b>Phone number:</b> {PhoneNum}\n          </p>\n          <p>\n            <b>Extension:</b> {Extension}\n          </p>\n          <p>\n            <b>Hire date:</b>\n            {dayjs(parseInt(HireDate))\n              .add(\n                dayjs(parseInt(HireDate))\n                  .toDate()\n                  .getTimezoneOffset(),\n                \"minute\"\n              )\n              .format(\"YYYY-MMM-DD\")}\n          </p>\n          <p>\n            <b>Salary bonus:</b> {SalaryBonus}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(employeeQuery, {\n    name: \"employeeQuery\",\n    options: props => {\n      return {\n        variables: {\n          id: props.selectedEmployee || props.match.params.employeeId\n        }\n      };\n    }\n  })\n)(employee);\n","export const parseDate = function(temp) {\n  let year = parseInt(temp.substring(0, 4));\n  let month = parseInt(temp.substring(5, 7));\n  let day = parseInt(temp.substring(8, 10));\n  if (year % 4 === 0) {\n    if (month === 2) {\n      if (day > 29) {\n        return false;\n      }\n    }\n  } else {\n    if (month === 2) {\n      if (day > 28) {\n        return false;\n      }\n    } else if (\n      (month === 1) |\n      (month === 3) |\n      (month === 5) |\n      (month === 7) |\n      (month === 8) |\n      (month === 10) |\n      (month === 12)\n    ) {\n      if (day > 31) {\n        return false;\n      }\n    } else {\n      if (day > 30) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n","import * as Yup from \"yup\";\n\nimport { parseDate } from \"../../util/util\";\n\nconst dateFormat = /^((?:20)\\d\\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;\nYup.addMethod(Yup.mixed, \"notInEmp\", function(array, message) {\n  return this.test({\n    message,\n    name: \"notInEmp\",\n    exclusive: true,\n    params: { array },\n    test(value) {\n      return !this.resolve(array).includes(value);\n    }\n  });\n});\n\nconst TeamName = Yup.string()\n  .trim()\n  .min(5, \"minimum 5 characters\")\n  .max(20, \"maximum 20 characters\")\n  .required(\"Required\");\nconst Projects = Yup.array().min(1, \"minimum of 1 project\");\nconst Employees = Yup.array().min(1, \"minimum of 1 member\");\nconst TeamLead = Yup.string().notInEmp(\n  Yup.ref(\"Employees\"),\n  \"Team lead cannot also be a team member\"\n);\n\nexport const CreateTeam = Yup.object().shape({\n  TeamName,\n  Projects,\n  Employees,\n  TeamLead\n});\n\nexport const UpdateTeam = Yup.object().shape({\n  TeamName,\n  Projects,\n  Employees,\n  TeamLead\n});\n\nexport const CreateProject = Yup.object().shape({\n  ProjectStartDate: Yup.string()\n    .matches(dateFormat, \"must be in YYYY-MM-DD format\")\n    .test(\"valid date\", \"invalid date\", function(val) {\n      if (!val) {\n        return true;\n      }\n      return parseDate(val);\n    })\n    .required(\"Required\"),\n  ProjectName: Yup.string()\n    .min(7, \"minimum 7 characters long\")\n    .max(20, \"maximum 20 characters long\")\n    .required(\"Required\"),\n  ProjectDescription: Yup.string()\n    .trim()\n    .test(\"word count\", \"Must be 20-150 words long\", function(str) {\n      if (str) {\n        return 20 <= str.split(\" \").length && str.split(\" \").length <= 150;\n      }\n    })\n    .required(\"Required\")\n});\n\nexport const UpdateProjectSchema = Yup.object().shape({\n  ProjectName: Yup.string()\n    .trim()\n    .min(5, \"minimum 5 characters long\")\n    .max(20, \"maximum 20 characters long\")\n    .required(\"Required\"),\n  ProjectDescription: Yup.string().test(\n    \"word count\",\n    \"Must be 20-150 words long\",\n    function(str) {\n      if (str) {\n        return 20 <= str.split(\" \").length && str.split(\" \").length <= 150;\n      }\n    }\n  ),\n  prevStartDate: Yup.string()\n    .matches(dateFormat, \"must be in YYYY-MM-DD format and a valid date\")\n    .test(\"valid date\", \"invalid date\", function(val) {\n      if (!val) {\n        return true;\n      }\n      return parseDate(val);\n    })\n    .required(\"Required\"),\n  prevEndDate: Yup.string()\n    .notRequired()\n    .matches(dateFormat, \"must be in YYYY-MM-DD format and a valid date\")\n    .test(\"valid date\", \"invalid date\", function(val) {\n      if (!val) {\n        return true;\n      }\n      return parseDate(val);\n    })\n});\n\nconst AddressStreet = Yup.string()\n  .min(5, \"minimum 5 characters\")\n  .max(30, \"maximum 20 characters\")\n  .required(\"Required\");\n\nconst AddressState = Yup.string()\n  .min(2, \"minimum 5 characters\")\n  .max(10, \"maximum 10 characters\")\n  .required(\"Required\");\n\nconst AddressCity = Yup.string()\n  .min(2, \"minimum 2 characters\")\n  .max(15, \"maximum 15 characters\")\n  .required(\"Required\");\n\nconst AddressZip = Yup.string()\n  .min(5, \"minimum 5 characters\")\n  .max(7, \"maximum 7 characters\")\n  .required(\"Required\");\n\nconst Position = Yup.string().required();\n\nconst FirstName = Yup.string()\n  .min(2, \"minimum 2 characters\")\n  .max(15, \"maximum 15 characters\")\n  .required(\"Required\");\n\nconst LastName = Yup.string()\n  .min(2, \"minimum 2 characters\")\n  .max(15, \"maximum 15 characters\")\n  .required(\"Required\");\n\nconst HireDate = Yup.string()\n  .matches(dateFormat, \"must be in YYYY-MM-DD format and a valid date\")\n  .test(\"valid date\", \"invalid date\", function(val) {\n    return parseDate(val);\n  })\n  .required(\"Required\");\n\nconst PhoneNum = Yup.string()\n  .min(10, \"minimum of 10 numbers\")\n  .max(15, \"maximum of 15 characters and numbers\")\n  .required(\"Required\");\n\nconst Username = Yup.string()\n  .min(5, \"minimum of 5 characters long\")\n  .max(10, \"maxinum of 10 characters long\")\n  .test(\"no space\", \"cannot contain space\", function(val) {\n    if (val) {\n      if (val.length > 0) {\n        return val.indexOf(\" \") === -1;\n      }\n    }\n    return true;\n  })\n  .required(\"required\");\n\nconst Email = Yup.string()\n  .email(\"Must be a valid email\")\n  .required(\"required\");\nexport const UpdateEmployeeSchema = Yup.object().shape({\n  AddressStreet,\n  AddressState,\n  AddressCity,\n  Extension: Yup.number()\n    .min(0)\n    .max(9999)\n    .required(\"Required\"),\n  AddressZip,\n\n  Position: Yup.string().required(\"Required\"),\n  FirstName,\n  LastName,\n  HireDate,\n  PhoneNum,\n  id: Yup.string().required(),\n  Username,\n  SalaryBonus: Yup.number()\n    .max(99999, \"maxnimum 99999\")\n    .nullable(),\n  Email\n});\n\nconst passwordRegex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,30}$/;\n\nexport const SingUpSchema = Yup.object().shape({\n  FirstName,\n  LastName,\n  AddressStreet,\n  AddressState,\n\n  AddressCity,\n  AddressZip,\n  Email,\n  Username,\n  Position,\n  PhoneNum,\n  PositionName: Yup.string().required(\"Required\"),\n  HireDate: Yup.string()\n    .matches(dateFormat, \"must be in YYYY-MM-DD format and a valid date\")\n    .test(\"valid date\", \"invalid date\", function(val) {\n      if (val) {\n        return parseDate(val);\n      } else {\n        return false;\n      }\n    }),\n  Password: Yup.string()\n    .matches(\n      passwordRegex,\n      \"minimum of one lower case, one uppercase, one number, one special character and between 8 to 30 characters long\"\n    )\n    .required(\"Required\"),\n  Extension: Yup.number()\n\n    .min(0, \"must be in between 0-9999\")\n    .max(9999, \"must be in between 0-9999\")\n    .nullable()\n});\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport {\n  employeeQuery,\n  positionsQuery,\n  updateEmployeeMutation\n} from \"../../../queries/queries\";\nimport { withRouter } from \"react-router-dom\";\nimport { UpdateEmployeeSchema } from \"../../../schema/schema\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport dayjs from \"dayjs\";\nimport \"./employeeForm.css\";\n\nclass employeeForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentEmployee: this.props.match.params.employeeId,\n      formVisibility: this.props.formVisibility\n    };\n  }\n\n  exitEmployeeForm = () => {\n    this.props.history.push(`/employee/${this.state.currentEmployee}`);\n  };\n\n  render() {\n    if (\n      !this.props.employeeQuery ||\n      this.props.employeeQuery.loading ||\n      !this.props.positionsQuery ||\n      this.props.positionsQuery.loading\n    ) {\n      return null;\n    }\n    const {\n      id,\n      FirstName,\n      LastName,\n      AddressStreet,\n      AddressCity,\n      AddressState,\n      AddressZip,\n      Extension,\n      PhoneNum,\n      HireDate,\n      Username,\n      SalaryBonus,\n      Email\n    } = this.props.employeeQuery.Employee;\n\n    const { PositionName } = this.props.employeeQuery.Employee.Position;\n    const { Positions } = this.props.positionsQuery;\n    const { updateEmployeeMutation } = this.props;\n    return (\n      <div className=\"employeeFormWrapper\">\n        <div className=\"statusBar\" onClick={this.exitEmployeeForm} />\n        <div className=\"employeeFormLeft\">\n          <h2 className=\"employeeFormName\">\n            {FirstName} <br />\n            {LastName}\n          </h2>\n          <br />\n          <p className=\"id\">\n            {id}\n            <br />\n            editing\n          </p>\n        </div>\n        <div className=\"employeeFormRight\">\n          <Formik\n            exitEmployeeForm={this.exitEmployeeForm}\n            initialValues={{\n              id,\n              FirstName,\n              LastName,\n              AddressStreet,\n              AddressCity,\n              AddressState,\n              AddressZip,\n              Extension: parseInt(Extension),\n              Username: Username ? Username : \"\",\n              PhoneNum,\n              HireDate: dayjs(parseInt(HireDate))\n                .add(\n                  dayjs(parseInt(HireDate))\n                    .toDate()\n                    .getTimezoneOffset(),\n                  \"minute\"\n                )\n                .format(\"YYYY-MM-DD\"),\n              Position: this.props.employeeQuery.Employee.Position.id,\n              Positions,\n              PositionName,\n              SalaryBonus,\n              Email: Email ? Email : \"\"\n            }}\n            validationSchema={UpdateEmployeeSchema}\n            onSubmit={async (values, { setSubmitting }) => {\n              const newEmp = await updateEmployeeMutation({\n                variables: {\n                  id,\n                  AddressCity: values.AddressCity,\n                  AddressStreet: values.AddressStreet,\n                  AddressZip: values.AddressZip,\n                  AddressState: values.AddressState,\n                  Extension: values.Extension,\n                  Position: values.Position,\n                  SalaryBonus: values.SalaryBonus,\n                  PhoneNum: values.PhoneNum,\n                  Username: values.Username,\n                  Email: values.Email,\n                  HireDate: values.HireDate,\n                  FirstName: values.FirstName,\n                  LastName: values.LastName\n                },\n                refetchQueries: [\n                  {\n                    query: employeeQuery,\n                    variables: { id: id }\n                  }\n                ]\n              });\n              if (newEmp) {\n                setSubmitting(false);\n                this.exitEmployeeForm();\n              }\n            }}\n            render={({\n              errors,\n              values,\n              status,\n              touched,\n              isSubmitting,\n              setFieldValue\n            }) => (\n              <Form className=\"updateEmployeeFormRight\">\n                <div className=\"updateEmployeeFormBody\">\n                  <label\n                    className=\"updateAddressStreet\"\n                    id=\"updateAddressStreet\"\n                  >\n                    street\n                    <Field\n                      type=\"text\"\n                      name=\"AddressStreet\"\n                      className={\n                        !errors.AddressStreet ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"AddressStreet\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updateAddressCity\" id=\"updateAddressCity\">\n                    city\n                    <Field\n                      type=\"text\"\n                      name=\"AddressCity\"\n                      className={\n                        !errors.AddressCity ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"AddressCity\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updateAddressState\" id=\"updateAddressState\">\n                    state\n                    <Field\n                      type=\"text\"\n                      name=\"AddressState\"\n                      className={\n                        !errors.AddressState ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"AddressCity\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updateAddressZip\" id=\"updateAddressZip\">\n                    ZIP/postal code\n                    <Field\n                      type=\"text\"\n                      name=\"AddressZip\"\n                      className={\n                        !errors.AddressZip ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"AddressZip\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updateHireDate\" id=\"updateHireDate\">\n                    hire date\n                    <Field\n                      type=\"text\"\n                      name=\"HireDate\"\n                      className={\n                        !errors.HireDate ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"HireDate\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updateSalaryBonus\" id=\"updateSalaryBonus\">\n                    Salary bonus\n                    <Field\n                      type=\"number\"\n                      name=\"SalaryBonus\"\n                      className={\n                        !errors.SalaryBonus ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"SalaryBonus\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updatePhoneNum\" id=\"updatePhoneNum\">\n                    Phone number\n                    <Field\n                      type=\"text\"\n                      name=\"PhoneNum\"\n                      className={\n                        !errors.PhoneNum ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"PhoneNum\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n\n                  <label className=\"updateExtension\" id=\"updateExtension\">\n                    Extension\n                    <Field\n                      type=\"number\"\n                      name=\"Extension\"\n                      className={\n                        !errors.Extension ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"Extension\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updateUsername\" id=\"updateUsername\">\n                    Username\n                    <Field\n                      type=\"text\"\n                      name=\"Username\"\n                      className={\n                        !errors.Username ? \"defaultInput\" : \"errorInput\"\n                      }\n                    />\n                    <ErrorMessage name=\"Username\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updateEmail\" id=\"updateEmail\">\n                    Email\n                    <Field\n                      type=\"text\"\n                      name=\"Email\"\n                      className={!errors.Email ? \"defaultInput\" : \"errorInput\"}\n                    />\n                    <ErrorMessage name=\"Email\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <label className=\"updatePosition\" id=\"updatePosition\">\n                    Position\n                    <Field\n                      type=\"text\"\n                      name=\"PositionName\"\n                      className=\"defaultInput\"\n                      readOnly\n                    />\n                    <ul className=\"list\">\n                      {Positions.map(position => {\n                        return (\n                          <li\n                            onClick={() => {\n                              setFieldValue(\n                                \"PositionName\",\n                                position.PositionName\n                              );\n                              setFieldValue(\"Position\", position.id);\n                            }}\n                            key={position.id}\n                            value={position.id}\n                          >\n                            {position.PositionName}\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </label>\n                  <button\n                    type=\"submit\"\n                    className=\"edit\"\n                    id=\"updateEmployeeFormButton\"\n                  >\n                    Submit\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(employeeQuery, {\n    name: \"employeeQuery\",\n    options: props => {\n      return {\n        variables: {\n          id: props.match.params.employeeId\n        }\n      };\n    }\n  }),\n  graphql(positionsQuery, { name: \"positionsQuery\" }),\n  graphql(updateEmployeeMutation, { name: \"updateEmployeeMutation\" })\n)(employeeForm);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport dayjs from \"dayjs\";\nimport SearchBar from \"../searchBar/searchBar\";\n\nimport { projectsQuery } from \"../queries/queries\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./projects.css\";\n\nclass projects extends Component {\n  state = {\n    userInput: \"\"\n  };\n\n  selectProject = projectId => {\n    this.setState({ selectedProject: projectId });\n  };\n\n  toViewProject = arg => {\n    this.props.history.push(`/project/${arg}`);\n  };\n\n  createNewProject = () => {\n    this.props.history.push(\"/project/new\");\n  };\n\n  search = arg => {\n    this.setState({ userInput: arg });\n  };\n\n  render() {\n    if (!this.props.projectsQuery || this.props.projectsQuery.loading) {\n      return null;\n    }\n\n    let filteredProjects = this.props.projectsQuery.Projects.filter(project => {\n      return (\n        project.ProjectName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        project.ProjectDescription.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1\n      );\n    });\n\n    return (\n      <div className=\"tableWrapper\">\n        <div className=\"searchBarArea\">\n          <SearchBar\n            displayedMessage={\"search by name/description\"}\n            className=\"projectSearchBar\"\n            search={this.search}\n          />\n        </div>\n\n        <button\n          className=\"createNew\"\n          id=\"createNewProjectButton\"\n          onClick={() => {\n            this.createNewProject();\n          }}\n        >\n          new project\n        </button>\n        <div className=\"outterWrapper\">\n          <table className=\"tableClass\">\n            <thead className=\"tableHead\">\n              <tr className=\"headRow\">\n                <th className=\"tableHeader projectNameWidth\">Project name</th>\n                <th\n                  className=\"tableHeader projectDescriptionWidth\"\n                  id=\"projectD\"\n                >\n                  Project description\n                </th>\n                <th className=\"tableHeader projectStartDateWidth\">\n                  Project start date\n                </th>\n                <th className=\"tableHeader projectEndDateWidth\">\n                  Project end date\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"tableBody\">\n              {!this.props.projectsQuery || this.props.projectsQuery.loading ? (\n                <tr>\n                  <td>Data is loading...</td>\n                </tr>\n              ) : (\n                filteredProjects.map(project => {\n                  return (\n                    <tr\n                      key={project.id}\n                      className=\"bodyRow\"\n                      onClick={() => {\n                        this.toViewProject(project.id);\n                      }}\n                    >\n                      <td className=\"tableContent projectNameWidth\">\n                        {project.ProjectName}\n                      </td>\n                      <td className=\"tableContent projectDescriptionWidth\">\n                        {project.ProjectDescription}\n                      </td>\n                      <td className=\"tableContent projectStartDateWidth\">\n                        {dayjs(parseInt(project.ProjectStartDate))\n                          .add(\n                            dayjs(parseInt(project.ProjectStartDate))\n                              .toDate()\n                              .getTimezoneOffset(),\n                            \"minute\"\n                          )\n                          .format(\"YYYY-MM-DD\")}\n                      </td>\n                      <td className=\"tableContent projectEndDateWidth\">\n                        {project.ProjectEndDate\n                          ? dayjs(parseInt(project.ProjectEndDate))\n                              .add(\n                                dayjs(parseInt(project.ProjectEndDate))\n                                  .toDate()\n                                  .getTimezoneOffset(),\n                                \"minute\"\n                              )\n                              .format(\"YYYY-MM-DD\")\n                          : \"-\"}\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(projectsQuery, { name: \"projectsQuery\" })\n)(projects);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { projectQuery } from \"../../queries/queries\";\nimport { withRouter } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport \"./project.css\";\n\nclass project extends Component {\n  startEditingProject = () => {\n    this.props.history.push(\n      `/project/edit/${this.props.match.params.projectId}`\n    );\n  };\n\n  toExit = () => {\n    this.props.history.push(`/projects`);\n  };\n\n  render() {\n    if (!this.props.projectQuery || this.props.projectQuery.loading) {\n      return null;\n    }\n    const {\n      ProjectName,\n      ProjectDescription,\n      ProjectStartDate,\n      ProjectEndDate\n    } = this.props.projectQuery.Project;\n    return (\n      <div className=\"projectWrapper\">\n        <div className=\"statusBar\" onClick={this.toExit} />\n        <div className=\"projectLeft\">\n          <h2>{ProjectName}</h2>\n\n          <button\n            onClick={() => {\n              this.startEditingProject();\n            }}\n            className=\"edit\"\n            id=\"projectEditButton\"\n          >\n            Edit\n          </button>\n        </div>\n        <div className=\"projectRight\">\n          <p className=\"projectDescription\">\n            <b className=\"projectLabel\">Project description</b> <br />\n            {ProjectDescription}\n          </p>\n          <div className=\"projectDate\">\n            <p className=\"projectStartDate\">\n              <b className=\"projectLabel\">Start date</b>\n              {dayjs(parseInt(ProjectStartDate))\n                .add(\n                  dayjs(parseInt(ProjectStartDate))\n                    .toDate()\n                    .getTimezoneOffset(),\n                  \"minute\"\n                )\n                .format(\"YYYY-MM-DD\")}\n            </p>\n            <p className=\"projectEndDate\">\n              <b className=\"projectLabel\">End date</b>\n              {ProjectEndDate\n                ? dayjs(parseInt(ProjectEndDate))\n                    .add(\n                      dayjs(parseInt(ProjectEndDate))\n                        .toDate()\n                        .getTimezoneOffset(),\n                      \"minute\"\n                    )\n                    .format(\"YYYY-MM-DD\")\n                : \"-\"}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(projectQuery, {\n    name: \"projectQuery\",\n    options: props => {\n      return {\n        variables: {\n          id: props.match.params.projectId\n        }\n      };\n    }\n  })\n)(project);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport {\n  projectQuery,\n  updateProjectMutation,\n  projectsQuery\n} from \"../../../queries/queries\";\nimport { UpdateProjectSchema } from \"../../../schema/schema\";\nimport { withRouter } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport dayjs from \"dayjs\";\nimport \"./projectForm.css\";\n\nclass projectForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projectId: this.props.match.params.projectId,\n      prevEndDate:\n        this.props.ProjEndDate === undefined ? \"\" : this.props.ProjEndDate\n    };\n  }\n\n  exitProjectForm = () => {\n    this.props.history.push(`/project/${this.state.projectId}`);\n  };\n  checkProjectName = (ProjectArray, val) => {\n    let projectNameFound;\n    ProjectArray.map(p => {\n      if (p.ProjectName.toUpperCase() === val.toUpperCase()) {\n        projectNameFound = p;\n      }\n      return p;\n    });\n    return projectNameFound;\n  };\n\n  render() {\n    if (\n      !this.props.projectQuery ||\n      this.props.projectQuery.loading ||\n      !this.props.projectsQuery ||\n      this.props.projectQuery.loading\n    ) {\n      return null;\n    }\n    const { Projects } = this.props.projectsQuery;\n\n    const {\n      id,\n      ProjectDescription,\n      ProjectStartDate,\n      ProjectEndDate,\n      ProjectName\n    } = this.props.projectQuery.Project;\n    const { updateProjectMutation } = this.props;\n\n    return (\n      <div className=\"projectFormWrapper\">\n        <div className=\"statusBar\" onClick={this.exitProjectForm} />\n        <div className=\"projectFormLeft\">\n          <h2>{ProjectName}</h2>\n          <p>\n            {id} <br /> editing\n          </p>\n        </div>\n        <Formik\n          exitProjectForm={this.exitProjectForm}\n          initialValues={{\n            id: id,\n            prevStartDate: dayjs(parseInt(ProjectStartDate))\n              .add(\n                dayjs(parseInt(ProjectStartDate))\n                  .toDate()\n                  .getTimezoneOffset(),\n                \"minute\"\n              )\n              .format(\"YYYY-MM-DD\"),\n            ProjectName: ProjectName,\n            ProjectDescription: ProjectDescription,\n            prevEndDate: ProjectEndDate\n              ? dayjs(parseInt(ProjectEndDate))\n                  .add(\n                    dayjs(parseInt(ProjectEndDate))\n                      .toDate()\n                      .getTimezoneOffset(),\n                    \"minute\"\n                  )\n                  .format(\"YYYY-MM-DD\")\n              : \"\"\n          }}\n          validationSchema={UpdateProjectSchema}\n          onSubmit={async (values, { setSubmitting }) => {\n            const updatedProject = await updateProjectMutation({\n              variables: {\n                id: values.id,\n                ProjectName: values.ProjectName,\n                ProjectDescription: values.ProjectDescription,\n                ProjectStartDate: values.prevStartDate,\n                ProjectEndDate: values.prevEndDate\n              },\n              refetchQueries: [\n                {\n                  query: projectQuery,\n                  variables: { id: values.id }\n                }\n              ]\n            });\n\n            if (updatedProject) {\n              this.exitProjectForm();\n              setSubmitting(false);\n            }\n          }}\n          render={({\n            errors,\n            values,\n            isSubmitting,\n            setFieldValue,\n            setFieldError,\n            setFieldTouched,\n            prevStartDate\n          }) => (\n            <Form className=\"projectFormRight\">\n              <label name=\"renameProject\" className=\"renameProject\">\n                rename project\n                <br />\n                <Field\n                  type=\"text\"\n                  name=\"ProjectName\"\n                  className={\n                    !errors.ProjectName ? \"defaultInput\" : \"errorInput\"\n                  }\n                  onBlur={event => {\n                    if (errors) {\n                      if (errors.ProjectName === \"Name is taken\") {\n                        setFieldError(\"ProjectName\", \"Name is taken\");\n                        setFieldTouched(\"ProjectName\", true, false);\n                      } else {\n                        setFieldTouched(\"ProjectName\", true);\n                      }\n                    } else {\n                      setFieldTouched(\"ProjectName\", true);\n                    }\n                  }}\n                  onChange={event => {\n                    setFieldValue(\"ProjectName\", event.target.value, false);\n                    const used = this.checkProjectName(\n                      Projects,\n                      event.target.value\n                    );\n                    if (used) {\n                      if (used.id === this.props.match.params.projectId) {\n                        setFieldValue(\"ProjectName\", event.target.value);\n                      } else {\n                        setFieldError(\"ProjectName\", \"Name is taken\");\n                        setFieldTouched(\"ProjectName\", true, false);\n                      }\n                    } else {\n                      setFieldValue(\"ProjectName\", event.target.value);\n                    }\n                  }}\n                />\n                <ErrorMessage name=\"ProjectName\">\n                  {errorMessage => <div className=\"error\">{errorMessage}</div>}\n                </ErrorMessage>\n              </label>\n              <label\n                name=\"projectDescription\"\n                className=\"ProjectDescription\"\n                id=\"editProjectDescription\"\n              >\n                Project description\n                <br />\n                <Field\n                  component=\"textarea\"\n                  name=\"ProjectDescription\"\n                  className={\n                    !errors.ProjectDescription\n                      ? \"defaultTextarea\"\n                      : \"errorInput\"\n                  }\n                />\n                <ErrorMessage name=\"ProjectDescription\">\n                  {errorMessage => <div className=\"error\">{errorMessage}</div>}\n                </ErrorMessage>\n              </label>\n              <div className=\"projectBottomArea\">\n                <label name=\"projectStartDate\" className=\"ProjectStartDate\">\n                  start date\n                  <br />\n                  <Field\n                    type=\"text\"\n                    name=\"prevStartDate\"\n                    className={\n                      !errors.prevStartDate ? \"defaultInput\" : \"errorInput\"\n                    }\n                  />\n                  <ErrorMessage name=\"prevStartDate\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label name=\"projectEndDate\" className=\"ProjectEndDate\">\n                  end date\n                  <br />\n                  <Field\n                    type=\"text\"\n                    name=\"prevEndDate\"\n                    className={\n                      !errors.prevEndDate ? \"defaultInput\" : \"errorInput\"\n                    }\n                  />\n                  <ErrorMessage name=\"prevEndDate\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n\n                <button\n                  type=\"submit\"\n                  className=\"edit\"\n                  id=\"projectSubmitButton\"\n                  disabled={errors ? true : false}\n                >\n                  Submit\n                </button>\n              </div>\n            </Form>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(projectQuery, {\n    name: \"projectQuery\",\n    options: props => {\n      return {\n        variables: {\n          id: props.match.params.projectId\n        }\n      };\n    }\n  }),\n  graphql(projectsQuery, { name: \"projectsQuery\" }),\n  graphql(updateProjectMutation, { name: \"updateProjectMutation\" })\n)(projectForm);\n","import React, { Component } from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\nimport { CreateProject } from \"../../schema/schema\";\nimport { createProjectMutation, projectsQuery } from \"../../queries/queries\";\n\nimport \"./newProjectForm.css\";\n\nclass newProjectForm extends Component {\n  exitNewProjectForm = () => {\n    this.props.history.push(\"/projects\");\n  };\n\n  checkProjectName = (ProjectArray, val) => {\n    let projectFound;\n    ProjectArray.map(p => {\n      if (p.ProjectName.toUpperCase() === val.toUpperCase()) {\n        projectFound = p;\n      }\n      return p;\n    });\n\n    return projectFound;\n  };\n\n  render() {\n    if (\n      !this.props.createProjectMutation ||\n      this.props.createProjectMutation.loading ||\n      !this.props.projectsQuery ||\n      this.props.projectsQuery.loading\n    ) {\n      return null;\n    }\n    const { createProjectMutation } = this.props;\n    const { Projects } = this.props.projectsQuery;\n    return (\n      <div className=\"newProjectFormWrapper\">\n        <div\n          className=\"statusBar\"\n          onClick={this.exitNewProjectForm}\n          id=\"exitNewProjectFormWrapper\"\n        />\n        <div className=\"newProjectFormLeft\">\n          <h2>New project</h2>\n        </div>\n        <div className=\"newProjectFormRight\">\n          <Formik\n            initialValues={{\n              ProjectName: \"\",\n              ProjectStartDate: \"\",\n              ProjectDescription: \"\"\n            }}\n            exitNewProjectForm={this.exitNewProjectForm}\n            validationSchema={CreateProject}\n            onSubmit={async (values, isSumitting) => {\n              const newProject = await createProjectMutation({\n                variables: {\n                  ProjectName: values.ProjectName,\n                  ProjectDescription: values.ProjectDescription,\n                  ProjectStartDate: values.ProjectStartDate\n                },\n                refetchQueries: [\n                  {\n                    query: projectsQuery\n                  }\n                ]\n              });\n              if (newProject) {\n                this.exitNewProjectForm();\n              }\n            }}\n            render={({\n              errors,\n              values,\n              status,\n              isSubmitting,\n              setFieldValue,\n              setFieldError,\n              setFieldTouched\n            }) => (\n              <Form className=\"newProjectForm\">\n                <label className=\"newProjectName\">\n                  Name\n                  <Field\n                    type=\"text\"\n                    name=\"ProjectName\"\n                    className={\n                      !errors.ProjectName ? \"defaultInput\" : \"errorInput\"\n                    }\n                    placeholder=\"7-15 characters long\"\n                    onBlur={event => {\n                      if (errors) {\n                        if (errors.ProjectName === \"Name is taken\") {\n                          setFieldTouched(\"ProjectName\", true, false);\n                        } else {\n                          setFieldTouched(\"ProjectName\", true);\n                        }\n                      }\n                    }}\n                    onChange={event => {\n                      let projectFound;\n                      setFieldValue(\"ProjectName\", event.target.value, false);\n                      projectFound = this.checkProjectName(\n                        Projects,\n                        event.target.value\n                      );\n                      if (projectFound) {\n                        setFieldError(\"ProjectName\", \"Name is taken\");\n                      } else {\n                        setFieldValue(\"ProjectName\", event.target.value);\n                      }\n                    }}\n                  />\n                  <ErrorMessage name=\"ProjectName\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label className=\"newProjectDescription\">\n                  description\n                  <Field\n                    type=\"text\"\n                    name=\"ProjectDescription\"\n                    className={\n                      !errors.ProjectDescription\n                        ? \"defaultTextarea\"\n                        : \"errorInput\"\n                    }\n                    id=\"newProjectFormTextarea\"\n                    component=\"textarea\"\n                    placeholder=\"20-150 characters long\"\n                  />\n                  <ErrorMessage name=\"ProjectDescription\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <div className=\"newProjectBottom\">\n                  <label className=\"newProjectStartDate\">\n                    start date\n                    <Field\n                      type=\"text\"\n                      name=\"ProjectStartDate\"\n                      className={\n                        !errors.ProjectStartDate ? \"defaultInput\" : \"errorInput\"\n                      }\n                      placeholder=\"YYYY-MM-DD\"\n                    />\n                    <ErrorMessage name=\"ProjectStartDate\">\n                      {errorMessage => (\n                        <div className=\"error\">{errorMessage}</div>\n                      )}\n                    </ErrorMessage>\n                  </label>\n                  <button\n                    className=\"edit\"\n                    id=\"newProjectSubmitButton\"\n                    type=\"submit\"\n                  >\n                    submit\n                  </button>\n                </div>\n              </Form>\n            )}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(createProjectMutation, { name: \"createProjectMutation\" }),\n  graphql(projectsQuery, { name: \"projectsQuery\" })\n)(newProjectForm);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\nimport SearchBar from \"../searchBar/searchBar\";\nimport { teamsQuery } from \"../queries/queries\";\n\nimport \"./teams.css\";\n\nclass teams extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\"\n    };\n  }\n\n  viewTeam = arg => {\n    this.props.history.push(`/team/${arg}`);\n  };\n\n  addNewTeam = () => {\n    this.props.history.push(\"/team/new\");\n  };\n\n  search = arg => {\n    this.setState({ userInput: arg });\n  };\n  render() {\n    if (!this.props.teamsQuery || this.props.teamsQuery.loading) {\n      return null;\n    }\n\n    const { Teams } = this.props.teamsQuery;\n\n    let filteredTeams = Teams.filter(Team => {\n      return (\n        Team.TeamName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        (Team.TeamLead.FirstName + \" \" + Team.TeamLead.LastName)\n          .toUpperCase()\n          .indexOf(this.state.userInput.toUpperCase()) !== -1\n      );\n    });\n    return (\n      <div className=\"tableWrapper\">\n        <button\n          className=\"createNew\"\n          id=\"createNewTeamButton\"\n          onClick={() => {\n            this.addNewTeam();\n          }}\n        >\n          new team\n        </button>\n        <div className=\"teamSearchBar\">\n          <SearchBar\n            displayedMessage={\"team name/team lead\"}\n            search={this.search}\n          />\n        </div>\n\n        <div className=\"outterWrapper\">\n          <table className=\"tableClass teamsTable\">\n            <thead className=\"tableHead \">\n              <tr className=\"headRow\">\n                <th className=\"tableHeader teamNameWidth\">Team Name</th>\n                <th className=\"tableHeader teamLeadWidth\">Team Lead</th>\n                <th className=\"tableHeader projectdWidth\">Projects</th>\n                <th className=\"tableHeader teamMemberWidth\">Team member</th>\n              </tr>\n            </thead>\n            <tbody className=\"tableBody\">\n              {!this.props.teamsQuery || this.props.teamsQuery.loading ? (\n                <tr>\n                  <td>Data is loading...</td>\n                </tr>\n              ) : (\n                filteredTeams.map(team => {\n                  return (\n                    <tr\n                      key={team.id}\n                      className=\"bodyRow\"\n                      onClick={() => {\n                        this.viewTeam(team.id);\n                      }}\n                    >\n                      <td className=\"tableContent teamNameWidth\">\n                        {team.TeamName}\n                      </td>\n                      <td className=\"tableContent teamLeadWidth\">\n                        {team.TeamLead.FirstName} {team.TeamLead.LastName}\n                      </td>\n                      <td className=\"tableContent projectsWidth\">\n                        <ul className=\"contentList\">\n                          {team.Projects.map(project => {\n                            return (\n                              <li key={project.id}>{project.ProjectName}</li>\n                            );\n                          })}\n                        </ul>\n                      </td>\n                      <td className=\"tableContent teamMemberWidth\">\n                        <ul className=\"contentList\">\n                          {team.Employees.map((employee, index) => {\n                            return (\n                              <li key={index}>\n                                {employee.FirstName} {employee.LastName}\n                              </li>\n                            );\n                          })}\n                        </ul>\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(teamsQuery, { name: \"teamsQuery\" })\n)(teams);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\nimport { teamQuery } from \"../../queries/queries\";\nimport \"./team.css\";\n\nclass team extends Component {\n  exitTeam = () => {\n    this.props.history.push(`/teams`);\n  };\n\n  toEditTeam = () => {\n    this.props.history.push(`/team/edit/${this.props.match.params.teamId}`);\n  };\n\n  render() {\n    if (!this.props.teamQuery || this.props.teamQuery.loading) {\n      return null;\n    }\n    const {\n      id,\n      TeamName,\n      TeamLead,\n      Projects,\n      Employees\n    } = this.props.teamQuery.Team;\n\n    return (\n      <div className=\"teamWrapper\">\n        <div className=\"statusBar\" onClick={this.exitTeam} />\n        <div className=\"teamInfoLeft\">\n          <h2 className=\"teamName\">{TeamName}</h2>\n          <div className=\"teamInfoBottom\">\n            <p className=\"teamId\">{id}</p>\n            <button\n              className=\"edit\"\n              id=\"editTeamButton\"\n              onClick={this.toEditTeam}\n            >\n              edit\n            </button>\n          </div>\n        </div>\n        <div className=\"teamInfoRight\">\n          <div className=\"teamInfoBody\">\n            <div className=\"teamLead\">\n              <label className=\"teamLabel\">lead</label>\n              <p>{TeamLead.FirstName + \" \" + TeamLead.LastName}</p>\n            </div>\n            <div className=\"tempProjects\">\n              <label className=\"teamLabel\">projects</label>\n              {Projects.map((project, index) => {\n                if (index !== Projects.length - 1) {\n                  return (\n                    <p key={project.id}>\n                      {project.ProjectName}, {\"\\u00A0\"}\n                    </p>\n                  );\n                }\n                return <p key={project.id}>{project.ProjectName}</p>;\n              })}\n            </div>\n            <div className=\"teamEmployees\">\n              <label className=\"teamLabel\">members</label>\n              {Employees.map((employee, index) => {\n                if (index !== Employees.length - 1) {\n                  return (\n                    <p key={employee.id}>\n                      {employee.FirstName} {employee.LastName},{\"\\u00A0\"}\n                    </p>\n                  );\n                }\n                return (\n                  <p key={employee.id}>\n                    {employee.FirstName} {employee.LastName}\n                  </p>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(teamQuery, {\n    name: \"teamQuery\",\n    options: props => {\n      return {\n        variables: {\n          id: props.match.params.teamId\n        }\n      };\n    }\n  })\n)(team);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport dayjs from \"dayjs\";\nimport {\n  teamQuery,\n  projectsQuery,\n  employeesQuery,\n  updateTeamMutation,\n  teamsQuery\n} from \"../../../queries/queries\";\nimport { UpdateTeam } from \"../../../schema/schema\";\nimport \"./teamForm.css\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\n\nclass teamForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      sortByName: \"default\",\n      sortByPosition: \"default\"\n    };\n  }\n\n  exitTeamForm = () => {\n    this.props.history.push(`/team/${this.props.match.params.teamId}`);\n  };\n\n  handleSearch = event => {\n    this.setState({ userInput: event.target.value });\n  };\n\n  toSortByName = () => {\n    this.setState({\n      sortByName: !this.state.sortByName,\n      sortByPosition: \"default\"\n    });\n  };\n\n  toSortByPosition = () => {\n    this.setState({\n      sortByName: \"default\",\n      sortByPosition: !this.state.sortByPosition\n    });\n  };\n\n  checkIfNameIsUsed = (TeamsObj, name) => {\n    let found;\n    TeamsObj.map(t => {\n      if (t.TeamName.toUpperCase() === name.toUpperCase()) {\n        found = t;\n      }\n      return t;\n    });\n    return found;\n  };\n\n  render() {\n    if (\n      !this.props.teamQuery ||\n      this.props.teamQuery.loading ||\n      !this.props.employeesQuery ||\n      this.props.employeesQuery.loading ||\n      !this.props.projectsQuery ||\n      this.props.projectsQuery.loading ||\n      !this.props.updateTeamMutation ||\n      this.props.updateTeamMutation.loading ||\n      !this.props.teamsQuery ||\n      this.props.teamsQuery.loading\n    ) {\n      return null;\n    }\n    const {\n      id: TeamId,\n      TeamName,\n      TeamLead,\n      Projects,\n      Employees\n    } = this.props.teamQuery.Team;\n\n    let filteredEmp = this.props.employeesQuery.Employees.filter(emp => {\n      return (\n        emp.FirstName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        emp.LastName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        (\n          emp.FirstName.toUpperCase() +\n          \" \" +\n          emp.LastName.toUpperCase()\n        ).indexOf(this.state.userInput.toUpperCase()) !== -1 ||\n        emp.Position.PositionName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1\n      );\n    });\n\n    let filteredProject = this.props.projectsQuery.Projects.filter(Project => {\n      return (\n        Project.ProjectName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1\n      );\n    });\n\n    const { sortByName, sortByPosition } = this.state;\n\n    if (sortByName === true) {\n      filteredEmp = _.sortBy(filteredEmp, \"FirstName\");\n    } else if (sortByName === false) {\n      filteredEmp = _.sortBy(filteredEmp, \"FirstName\").reverse();\n    }\n\n    if (sortByPosition === true) {\n      filteredEmp = _.sortBy(filteredEmp, function(emp) {\n        return emp.Position.PositionName;\n      });\n    } else if (sortByPosition === false) {\n      filteredEmp = _.sortBy(filteredEmp, function(emp) {\n        return emp.Position.PositionName;\n      }).reverse();\n    }\n    const { updateTeamMutation } = this.props;\n    const { Teams } = this.props.teamsQuery;\n\n    return (\n      <div className=\"editTeamWrapper\">\n        <div className=\"statusBar\" onClick={this.exitTeamForm} />\n        <div className=\"editTeamLeft\">\n          <div className=\"editTeamLeftAreas\">\n            <h2 className=\"teamFormTeamName\">{TeamName}</h2>\n            <p className=\"teamFormTeamId\">\n              Editing\n              <br />\n              {TeamId}\n            </p>\n          </div>\n        </div>\n        <Formik\n          initialValues={{\n            id: this.props.match.params.teamId,\n            Employees: Employees.map(m => m.id),\n            TeamName: TeamName,\n            Projects: Projects.map(p => p.id),\n            TeamLead: TeamLead.id\n          }}\n          validationSchema={UpdateTeam}\n          onSubmit={(values, { setSubmitting }) => {\n            const updatedTeam = updateTeamMutation({\n              variables: {\n                TeamName: values.TeamName,\n                EmployeeIds: values.Employees,\n                ProjectIds: values.Projects,\n                TeamLeadId: values.TeamLead,\n                id: values.id\n              },\n              refetchQueries: [\n                {\n                  query: teamQuery,\n                  variables: { id: values.id }\n                }\n              ]\n            });\n\n            if (updatedTeam) {\n              setSubmitting(false);\n              this.exitTeamForm();\n            }\n          }}\n          render={({\n            errors,\n            values,\n            isSubmitting,\n            setFieldValue,\n            handleBlur,\n            setFieldError,\n            setFieldTouched\n          }) => (\n            <Form className=\"editTeamForm\">\n              <div className=\"editTeamFormTop\">\n                <label name=\"teamName\" className=\"renameTeam\">\n                  rename team\n                  <br />\n                  <Field\n                    type=\"text\"\n                    name=\"TeamName\"\n                    className={!errors.TeamName ? \"defaultInput\" : \"errorInput\"}\n                    value={values.TeamName}\n                    onBlur={event => {\n                      if (errors) {\n                        if (errors.TeamName === \"Name is taken\") {\n                          setFieldTouched(\"TeamName\", true, false);\n                          setFieldError(\"TeamName\", \"Name is taken\");\n                        } else {\n                          setFieldTouched(\"TeamName\", true, true);\n                        }\n                      }\n                    }}\n                    onChange={event => {\n                      setFieldValue(\"TeamName\", event.target.value, false);\n                      const used = this.checkIfNameIsUsed(\n                        Teams,\n                        event.target.value\n                      );\n                      if (used) {\n                        if (used.id === this.props.match.params.teamId) {\n                          setFieldValue(\"TeamName\", event.target.value);\n                        } else {\n                          setFieldError(\"TeamName\", \"Name is taken\");\n                          setFieldTouched(\"TeamName\", true, false);\n                        }\n                      } else {\n                        setFieldValue(\"TeamName\", event.target.value);\n                      }\n                    }}\n                  />\n                  <ErrorMessage name=\"TeamName\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n\n                <div className=\"teamSearchArea\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"name/position/project name\"\n                    className=\"teamSearchInput\"\n                    onChange={this.handleSearch}\n                  />\n                  <button className=\"teamSearchButton\">\n                    <i className=\"fas fa-search\" id=\"teamSearchIcon\" />\n                  </button>\n                  <p className=\"teamSearchText\">Search</p>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"edit\"\n                  id=\"submitTeamFormButton\"\n                  disabled={isSubmitting || !_.isEmpty(errors)}\n                >\n                  Submit\n                </button>\n              </div>\n              <table className=\"editTeamMembers\">\n                <caption className=\"row\">\n                  <ErrorMessage name=\"TeamLead\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                  <ErrorMessage name=\"Employees\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </caption>\n                <thead className=\"thead\">\n                  <tr className=\"row\">\n                    <th\n                      className=\"theader\"\n                      onClick={this.toSortByName}\n                      id={\n                        this.state.sortByName\n                          ? this.state.sortByName === \"default\"\n                            ? null\n                            : \"empDesc\"\n                          : \"empAsc\"\n                      }\n                    >\n                      Name\n                    </th>\n                    <th\n                      className=\"theader\"\n                      onClick={this.toSortByPosition}\n                      id={\n                        this.state.sortByPosition\n                          ? this.state.sortByPosition === \"default\"\n                            ? null\n                            : \"empDesc\"\n                          : \"empAsc\"\n                      }\n                    >\n                      Position\n                    </th>\n                    <th className=\"theader\">Team Lead</th>\n                    <th className=\"theader\">Team members</th>\n                  </tr>\n                </thead>\n                <tbody className=\"editEmployeeTableBody\">\n                  {filteredEmp.map(Employee => {\n                    return (\n                      <tr key={Employee.id} className=\"row\">\n                        <td className=\"cell\">\n                          {Employee.FirstName} {Employee.LastName}\n                        </td>\n                        <td className=\"cell\">\n                          {Employee.Position.PositionName}\n                        </td>\n                        <td className=\"cell\">\n                          <Field\n                            type=\"radio\"\n                            name=\"TeamLead\"\n                            value={Employee.id}\n                            checked={Employee.id === values.TeamLead}\n                            onChange={event => {\n                              setFieldValue(\"TeamLead\", event.target.value);\n                            }}\n                          />\n                        </td>\n                        <td className=\"cell\">\n                          <Field\n                            type=\"checkbox\"\n                            value={Employee.id}\n                            name=\"Employees\"\n                            onChange={event => {\n                              let newEmpIds;\n                              if (\n                                values.Employees.includes(event.target.value)\n                              ) {\n                                newEmpIds = values.Employees.filter(\n                                  id => id !== event.target.value\n                                );\n                              } else {\n                                newEmpIds = values.Employees.concat(\n                                  event.target.value\n                                );\n                              }\n                              setFieldValue(\"Employees\", newEmpIds);\n                            }}\n                            checked={\n                              values.Employees.indexOf(Employee.id) !== -1\n                                ? true\n                                : false\n                            }\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <table className=\"editTeamProject\">\n                <caption>\n                  <ErrorMessage name=\"Projects\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </caption>\n                <thead className=\"thead\">\n                  <tr className=\"row\">\n                    <th className=\"theader\">Project name</th>\n                    <th className=\"theader\">Project start date</th>\n                    <th className=\"theader\">Selected</th>\n                  </tr>\n                </thead>\n                <tbody className=\"editProjectTableBody\">\n                  {filteredProject.map(Project => {\n                    return (\n                      <tr key={Project.id} className=\"row\">\n                        <td className=\"cell\">{Project.ProjectName}</td>\n                        <td className=\"cell\">\n                          {dayjs(parseInt(Project.ProjectStartDate))\n                            .add(\n                              dayjs(parseInt(Project.ProjectStartDate))\n                                .toDate()\n                                .getTimezoneOffset(),\n                              \"minute\"\n                            )\n                            .format(\"YYYY-MM-DD\")}\n                        </td>\n                        <td className=\"cell\">\n                          <Field\n                            type=\"checkbox\"\n                            name=\"Projects\"\n                            value={Project.id}\n                            checked={\n                              values.Projects.indexOf(Project.id) !== -1\n                                ? true\n                                : false\n                            }\n                            onChange={event => {\n                              let newProjectIds;\n                              if (\n                                values.Projects.indexOf(event.target.value) !==\n                                -1\n                              ) {\n                                newProjectIds = values.Projects.filter(\n                                  p => p !== event.target.value\n                                );\n                              } else {\n                                newProjectIds = values.Projects.concat(\n                                  event.target.value\n                                );\n                              }\n                              setFieldValue(\"Projects\", newProjectIds);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </Form>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(teamQuery, {\n    options: props => {\n      return {\n        variables: {\n          id: props.match.params.teamId\n        }\n      };\n    },\n    name: \"teamQuery\"\n  }),\n  graphql(employeesQuery, { name: \"employeesQuery\" }),\n  graphql(projectsQuery, { name: \"projectsQuery\" }),\n  graphql(updateTeamMutation, { name: \"updateTeamMutation\" }),\n  graphql(teamsQuery, { name: \"teamsQuery\" })\n)(teamForm);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport dayjs from \"dayjs\";\nimport {\n  projectsQuery,\n  employeesQuery,\n  teamsQuery,\n  createTeamMutation\n} from \"../../queries/queries\";\nimport { CreateTeam } from \"../../schema/schema\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\n\nclass newTeam extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: \"\",\n      sortByName: \"default\",\n      sortByPosition: \"default\"\n    };\n  }\n  exitNewTeamForm = () => {\n    this.props.history.push(\"/teams\");\n  };\n\n  handleSearch = event => {\n    this.setState({ userInput: event.target.value });\n  };\n\n  toSortByName = () => {\n    this.setState({\n      sortByName: !this.state.sortByName,\n      sortByPosition: \"default\"\n    });\n  };\n\n  toSortByPosition = () => {\n    this.setState({\n      sortByName: \"default\",\n      sortByPosition: !this.state.sortByPosition\n    });\n  };\n\n  checkIfNameIsUsed = (TeamsObj, name) => {\n    let foundObj;\n    TeamsObj.map(function(TeamObj) {\n      if (TeamObj.TeamName.toUpperCase() === name.trim().toUpperCase()) {\n        foundObj = TeamObj;\n      }\n      return TeamObj;\n    });\n    return foundObj;\n  };\n\n  render() {\n    if (\n      !this.props.employeesQuery ||\n      this.props.employeesQuery.loading ||\n      !this.props.projectsQuery ||\n      this.props.projectsQuery.loading ||\n      !this.props.teamsQuery ||\n      this.props.teamsQuery.loading ||\n      !this.props.createTeamMutation ||\n      this.props.createTeamMutation.loading\n    ) {\n      return null;\n    }\n\n    let filteredEmp = this.props.employeesQuery.Employees.filter(emp => {\n      return (\n        emp.FirstName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        emp.LastName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1 ||\n        (\n          emp.FirstName.toUpperCase() +\n          \" \" +\n          emp.LastName.toUpperCase()\n        ).indexOf(this.state.userInput.toUpperCase()) !== -1 ||\n        emp.Position.PositionName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1\n      );\n    });\n\n    let filteredProject = this.props.projectsQuery.Projects.filter(Project => {\n      return (\n        Project.ProjectName.toUpperCase().indexOf(\n          this.state.userInput.toUpperCase()\n        ) !== -1\n      );\n    });\n\n    const { sortByName, sortByPosition } = this.state;\n\n    if (sortByName === true) {\n      filteredEmp = _.sortBy(filteredEmp, \"FirstName\");\n    } else if (sortByName === false) {\n      filteredEmp = _.sortBy(filteredEmp, \"FirstName\").reverse();\n    }\n\n    if (sortByPosition === true) {\n      filteredEmp = _.sortBy(filteredEmp, function(emp) {\n        return emp.Position.PositionName;\n      });\n    } else if (sortByPosition === false) {\n      filteredEmp = _.sortBy(filteredEmp, function(emp) {\n        return emp.Position.PositionName;\n      }).reverse();\n    }\n    const { createTeamMutation } = this.props;\n    const { Teams } = this.props.teamsQuery;\n    console.log(\"team form is called\");\n    return (\n      <div className=\"editTeamWrapper\">\n        <div className=\"statusBar\" onClick={this.exitNewTeamForm} />\n        <div className=\"editTeamLeft\">\n          <div className=\"editTeamLeftAreas\">\n            <h2 className=\"teamFormTeamName\">New team</h2>\n          </div>\n        </div>\n        <Formik\n          initialValues={{\n            Employees: [],\n            TeamName: \"\",\n            Projects: [],\n            TeamLead: \"\"\n          }}\n          validationSchema={CreateTeam}\n          onSubmit={async (values, { setSubmitting }) => {\n            const newTeam = createTeamMutation({\n              variables: {\n                TeamLeadId: values.TeamLead,\n                ProjectIds: values.Projects,\n                EmployeeIds: values.Employees,\n                TeamName: values.TeamName\n              },\n              refetchQueries: [\n                {\n                  query: teamsQuery\n                }\n              ]\n            });\n            if (newTeam) {\n              setSubmitting(false);\n              this.exitNewTeamForm();\n            }\n          }}\n          render={({\n            errors,\n            values,\n            isSubmitting,\n            setFieldValue,\n            handleBlur,\n            setFieldError,\n            setFieldTouched\n          }) => (\n            <Form className=\"editTeamForm\">\n              <div className=\"editTeamFormTop\">\n                <label name=\"teamName\" className=\"renameTeam\">\n                  team name\n                  <br />\n                  <Field\n                    type=\"text\"\n                    name=\"TeamName\"\n                    className={!errors.TeamName ? \"defaultInput\" : \"errorInput\"}\n                    value={values.TeamName}\n                    onBlur={event => {\n                      if (errors) {\n                        if (errors.TeamName === \"Team name has been taken\") {\n                          setFieldTouched(\"TeamName\", true, false);\n                          setFieldError(\"TeamName\", \"name has been taken\");\n                        } else {\n                          setFieldTouched(\"TeamName\", true, true);\n                        }\n                      }\n                    }}\n                    onChange={event => {\n                      const foundObj = this.checkIfNameIsUsed(\n                        Teams,\n                        event.target.value\n                      );\n                      if (foundObj) {\n                        if (foundObj.id !== this.props.currentTeam) {\n                          setFieldValue(\"TeamName\", event.target.value, false);\n                          setFieldError(\"TeamName\", \"Team name has been taken\");\n                        } else {\n                          setFieldValue(\"TeamName\", event.target.value);\n                        }\n                      } else {\n                        setFieldValue(\"TeamName\", event.target.value);\n                      }\n                    }}\n                  />\n                  <ErrorMessage name=\"TeamName\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n\n                <div className=\"teamSearchArea\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"name/position/project name\"\n                    className=\"teamSearchInput\"\n                    onChange={this.handleSearch}\n                  />\n                  <button className=\"teamSearchButton\">\n                    <i className=\"fas fa-search\" id=\"teamSearchIcon\" />\n                  </button>\n                  <p className=\"teamSearchText\">Search</p>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"edit\"\n                  id=\"submitTeamFormButton\"\n                >\n                  Submit\n                </button>\n              </div>\n              <table className=\"editTeamMembers\">\n                <caption className=\"row\">\n                  <ErrorMessage name=\"TeamLead\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                  <ErrorMessage name=\"Employees\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </caption>\n                <thead className=\"thead\">\n                  <tr className=\"row\">\n                    <th\n                      className=\"theader\"\n                      onClick={this.toSortByName}\n                      id={\n                        this.state.sortByName\n                          ? this.state.sortByName === \"default\"\n                            ? null\n                            : \"empDesc\"\n                          : \"empAsc\"\n                      }\n                    >\n                      Name\n                    </th>\n                    <th\n                      className=\"theader\"\n                      onClick={this.toSortByPosition}\n                      id={\n                        this.state.sortByPosition\n                          ? this.state.sortByPosition === \"default\"\n                            ? null\n                            : \"empDesc\"\n                          : \"empAsc\"\n                      }\n                    >\n                      Position\n                    </th>\n                    <th className=\"theader\">Team Lead</th>\n                    <th className=\"theader\">Team members</th>\n                  </tr>\n                </thead>\n                <tbody className=\"editEmployeeTableBody\">\n                  {filteredEmp.map(Employee => {\n                    return (\n                      <tr key={Employee.id} className=\"row\">\n                        <td className=\"cell\">\n                          {Employee.FirstName} {Employee.LastName}\n                        </td>\n                        <td className=\"cell\">\n                          {Employee.Position.PositionName}\n                        </td>\n                        <td className=\"cell\">\n                          <Field\n                            type=\"radio\"\n                            name=\"TeamLead\"\n                            value={Employee.id}\n                            checked={Employee.id === values.TeamLead}\n                            onChange={event => {\n                              setFieldValue(\"TeamLead\", event.target.value);\n                            }}\n                          />\n                        </td>\n                        <td className=\"cell\">\n                          <Field\n                            type=\"checkbox\"\n                            value={Employee.id}\n                            name=\"Employees\"\n                            onChange={event => {\n                              let newEmpIds;\n                              if (\n                                values.Employees.includes(event.target.value)\n                              ) {\n                                newEmpIds = values.Employees.filter(\n                                  id => id !== event.target.value\n                                );\n                              } else {\n                                newEmpIds = values.Employees.concat(\n                                  event.target.value\n                                );\n                              }\n                              setFieldValue(\"Employees\", newEmpIds);\n                            }}\n                            checked={\n                              values.Employees.indexOf(Employee.id) !== -1\n                                ? true\n                                : false\n                            }\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n              <table className=\"editTeamProject\">\n                <caption>\n                  <ErrorMessage name=\"Projects\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </caption>\n                <thead className=\"thead\">\n                  <tr className=\"row\">\n                    <th className=\"theader\">Project name</th>\n                    <th className=\"theader\">Project start date</th>\n                    <th className=\"theader\">Selected</th>\n                  </tr>\n                </thead>\n                <tbody className=\"editProjectTableBody\">\n                  {filteredProject.map(Project => {\n                    return (\n                      <tr key={Project.id} className=\"row\">\n                        <td className=\"cell\">{Project.ProjectName}</td>\n                        <td className=\"cell\">\n                          {dayjs(parseInt(Project.ProjectStartDate))\n                            .add(\n                              dayjs(parseInt(Project.ProjectStartDate))\n                                .toDate()\n                                .getTimezoneOffset(),\n                              \"minute\"\n                            )\n                            .format(\"YYYY-MM-DD\")}\n                        </td>\n                        <td className=\"cell\">\n                          <Field\n                            type=\"checkbox\"\n                            name=\"Projects\"\n                            value={Project.id}\n                            checked={\n                              values.Projects.indexOf(Project.id) !== -1\n                                ? true\n                                : false\n                            }\n                            onChange={event => {\n                              let newProjectIds;\n                              if (\n                                values.Projects.indexOf(event.target.value) !==\n                                -1\n                              ) {\n                                newProjectIds = values.Projects.filter(\n                                  p => p !== event.target.value\n                                );\n                              } else {\n                                newProjectIds = values.Projects.concat(\n                                  event.target.value\n                                );\n                              }\n                              setFieldValue(\"Projects\", newProjectIds);\n                            }}\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </Form>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(createTeamMutation, { name: \"createTeamMutation\" }),\n  graphql(employeesQuery, { name: \"employeesQuery\" }),\n  graphql(projectsQuery, { name: \"projectsQuery\" }),\n  graphql(teamsQuery, { name: \"teamsQuery\" })\n)(newTeam);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { SingUpSchema } from \"../schema/schema\";\nimport {\n  signUpMutation,\n  employeeEmailsQuery,\n  positionsQuery\n} from \"../queries/queries\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport \"./register.css\";\n\nclass register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultAuth: props.defaultAuth\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.defaultAuth !== prevState.defaultAuth) {\n      return { defaultAuth: nextProps.defaultAuth };\n    } else {\n      return null;\n    }\n  }\n\n  backToMain = () => {\n    this.props.history.push(\"/\");\n  };\n\n  checkEmail = (emailArray, email) => {\n    if (emailArray.includes(email)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  render() {\n    const { defaultAuth } = this.state;\n    if (\n      !this.props.employeeEmailsQuery ||\n      this.props.employeeEmailsQuery.loading ||\n      !this.props.positionsQuery ||\n      this.props.positionsQuery.loading ||\n      !this.props.signUpMutation ||\n      this.props.signUpMutation.loading\n    ) {\n      return null;\n    }\n\n    const { EmployeeEmails } = this.props.employeeEmailsQuery;\n    const { Positions } = this.props.positionsQuery;\n\n    let EmailsArray = EmployeeEmails.filter(e => e.Email).map(e => e.Email);\n\n    if (defaultAuth) {\n      return <Redirect to=\"/\" />;\n    } else {\n      return (\n        <div className=\"registerWrapper\">\n          <div className=\"statusBar\" onClick={this.backToMain} />\n          <div className=\"registerLeft\">\n            <h2>new employee</h2>\n          </div>\n\n          <Formik\n            EmailsArray\n            initialValues={{\n              Email: \"\",\n              Password: \"\",\n              FirstName: \"\",\n              LastName: \"\",\n              AddressStreet: \"\",\n              AddressCity: \"\",\n              AddressZip: \"\",\n              AddressState: \"\",\n              Position: \"\",\n              Username: \"\",\n              HireDate: \"\",\n              Extension: \"\",\n              PhoneNum: \"\",\n              PositionName: \"\"\n            }}\n            validationSchema={SingUpSchema}\n            onSubmit={async (values, setSubmitting) => {\n              const newEmployee = await this.props.signUpMutation({\n                variables: {\n                  FirstName: values.FirstName,\n                  LastName: values.LastName,\n                  Position: values.Position,\n                  Extension: values.Extension === \"\" ? null : values.Extension,\n                  HireDate: values.HireDate,\n                  PhoneNum: values.PhoneNum,\n                  AddressStreet: values.AddressStreet,\n                  AddressCity: values.AddressCity,\n                  AddressState: values.AddressState,\n                  AddressZip: values.AddressZip,\n                  Password: values.Password,\n                  Username: values.Username,\n                  Email: values.Email\n                }\n              });\n              if (newEmployee) {\n                this.props.changeAuthStatus(true);\n                this.props.history.push(\"/\");\n              }\n            }}\n            render={({\n              errors,\n              values,\n              status,\n              isSubmitting,\n              setFieldValue,\n              setFieldError,\n              setFieldTouched\n            }) => (\n              <Form className=\"newEmployeeForm\">\n                <label id=\"employeeEmail\">\n                  Email\n                  <Field\n                    name=\"Email\"\n                    className={\n                      !errors.Email ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                    onBlur={event => {\n                      if (errors) {\n                        if (errors.Email === \"Email is taken\") {\n                          setFieldError(\"Email\", \"Email is taken\");\n                          setFieldTouched(\"Email\", true, false);\n                        }\n                      }\n                    }}\n                    onChange={event => {\n                      const Used = this.checkEmail(\n                        EmailsArray,\n                        event.target.value\n                      );\n                      if (Used === true) {\n                        console.log(\"Didn't Pass\");\n                        setFieldError(\"Email\", \"Email is taken\");\n                        setFieldTouched(\"Email\", true, false);\n                      } else {\n                        setFieldValue(\"Email\", event.target.value, true);\n                      }\n                    }}\n                  />\n                  <ErrorMessage name=\"Email\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeePassword\">\n                  Password\n                  <Field\n                    name=\"Password\"\n                    className={\n                      !errors.Password ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"password\"\n                  />\n                  <ErrorMessage name=\"Password\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeUsername\">\n                  Username\n                  <Field\n                    name=\"Username\"\n                    className={\n                      !errors.Username ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"Username\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeAddressStreet\">\n                  Street\n                  <Field\n                    name=\"AddressStreet\"\n                    className={\n                      !errors.Email ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"AddressStreet\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeAddressCity\">\n                  City\n                  <Field\n                    name=\"AddressCity\"\n                    className={\n                      !errors.AddressCity ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"AddressCity\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeAddressState\">\n                  state/province\n                  <Field\n                    name=\"AddressState\"\n                    className={\n                      !errors.AddressState ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"AddressState\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeAddressZip\">\n                  Zip/Postal code\n                  <Field\n                    name=\"AddressZip\"\n                    className={\n                      !errors.AddressZip ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"AddressZip\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeePhoneNum\">\n                  Phone number\n                  <Field\n                    name=\"PhoneNum\"\n                    className={\n                      !errors.PhoneNum ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"PhoneNum\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeHireDate\">\n                  Hire date\n                  <Field\n                    name=\"HireDate\"\n                    className={\n                      !errors.HireDate ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"HireDate\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeFirstName\">\n                  First name\n                  <Field\n                    name=\"FirstName\"\n                    className={\n                      !errors.FirstName ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"FirstName\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeLastName\">\n                  Last name\n                  <Field\n                    name=\"LastName\"\n                    className={\n                      !errors.LastName ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                  />\n                  <ErrorMessage name=\"LastName\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n\n                <label id=\"employeePosition\">\n                  Position\n                  <Field\n                    name=\"PositionName\"\n                    className={\n                      !errors.PositionName ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"text\"\n                    readOnly\n                  />\n                  <ul className=\"employeePositions\">\n                    {Positions.map(p => {\n                      return (\n                        <li\n                          className=\"employeePositionList\"\n                          key={p.id}\n                          value={p.id}\n                          onClick={e => {\n                            setFieldValue(\"PositionName\", p.PositionName);\n                            setFieldValue(\"Position\", p.id);\n                          }}\n                        >\n                          {p.PositionName}\n                        </li>\n                      );\n                    })}\n                  </ul>\n                  <ErrorMessage name=\"Position\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <label id=\"employeeExtension\">\n                  Extension*\n                  <Field\n                    name=\"Extension\"\n                    className={\n                      !errors.Extension ? \"newEmployeeInput\" : \"errorInput\"\n                    }\n                    type=\"number\"\n                  />\n                  <ErrorMessage name=\"Extension\">\n                    {errorMessage => (\n                      <div className=\"error\">{errorMessage}</div>\n                    )}\n                  </ErrorMessage>\n                </label>\n                <p id=\"optional\">* optional</p>\n                <button className=\"edit\" id=\"newEmployeeButton\" type=\"submit\">\n                  submit\n                </button>\n              </Form>\n            )}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(positionsQuery, { name: \"positionsQuery\" }),\n  graphql(employeeEmailsQuery, { name: \"employeeEmailsQuery\" }),\n  graphql(signUpMutation, { name: \"signUpMutation\" })\n)(register);\n","import React, { PureComponent } from \"react\";\nimport \"./footer.css\";\n\nclass footer extends PureComponent {\n  render() {\n    return (\n      <div className=\"footerWrapper\">\n        <h4>\n          SHENG\n          <i className=\"far fa-copyright\" id=\"copyRightIcon\" /> 2019\n        </h4>\n      </div>\n    );\n  }\n}\n\nexport default footer;\n","import React, { Component } from \"react\";\n\nimport \"./home.css\";\n\nclass home extends Component {\n  /*constructor(props) {\n    super();\n    this.state = {\n      textColor: \"white\"\n    };\n  }*/\n\n  getTextColor = () => {\n    if (this.props.authenticated) {\n      return \"black\";\n    } else {\n      return \"white\";\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"homeWrapper\">\n        <div />\n        <div className=\"webDesc\">\n          <h3 className={this.getTextColor()}>\n            hover\n            <br />\n            to see description\n          </h3>\n        </div>\n        <div className=\"descText\">\n          <h4 className={this.getTextColor()}>The web app</h4>\n          <p>allows registered user to manage employees, projects and teams</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default home;\n","import React, { Component } from \"react\";\nimport { Scene, Controller } from \"react-scrollmagic\";\nimport { Tween } from \"react-gsap\";\n\nimport \"./about.css\";\n\nclass about extends Component {\n  aboutPageTheme = () => {\n    if (!this.props.authenticated) {\n      return \" darkTheme\";\n    } else {\n      return \" brightTheme\";\n    }\n  };\n\n  render() {\n    return (\n      <section className={\"about\" + this.aboutPageTheme()}>\n        <div className=\"website\">\n          <Controller>\n            <Scene\n              duration=\"80\"\n              triggerHook={0.25}\n              offset=\"-20\"\n              triggerElement={\".website\"}\n            >\n              <Tween from={{ xPercent: 3000 }} to={{ xPercent: 0 }}>\n                <div className=\"wiperRight\" />\n              </Tween>\n            </Scene>\n          </Controller>\n          <Controller>\n            <Scene\n              duration=\"80\"\n              triggerHook={0.215}\n              offset=\"-20\"\n              triggerElement={\".website\"}\n            >\n              <Tween\n                from={{ autoAlpha: 0, x: -100 }}\n                to={{ autoAlpha: 1, x: 0 }}\n              >\n                <div className=\"description\">\n                  <h1 className=\"aboutFont\">About </h1>\n                  <h4>the web app</h4>\n                </div>\n              </Tween>\n            </Scene>\n          </Controller>\n\n          <div className=\"frontEnd\">\n            <h3>font-end</h3>\n            <p>React</p>\n            <p>Apollo Client</p>\n          </div>\n          <div className=\"backEnd\">\n            <h3>back-end</h3>\n            <p>Express</p>\n            <p>Apollo Server</p>\n            <p>GraphQL</p>\n          </div>\n        </div>\n        <div className=\"websiteDetail\">\n          <div className=\"descContent\">\n            <p>\n              &nbsp;&nbsp; The web app is built with React, Express, GraphQL,\n              few gray hairs and countless Monsters.\n            </p>\n            <br />\n            <p>\n              &nbsp;Data is stored on Mongo Atlas. User is\n              authenticated/authorized using express-session stored on Mongo Atlas.\n              Joi and Yup are used to validate user input. Formik is used for\n              handling user input. Dayjs is used to handle date related data.\n            </p>\n            <br />\n            <p>\n              &nbsp;The web app fully supports creating, updating and viewing\n              data. Some adjustments are only allowed to be done through\n              back-end. It also has responsive deisgn. All the pages are routed\n              to respective URIs. The original{\" \"}\n              <a\n                className=\"linkToData\"\n                href=\"https://github.com/sictweb/web422/tree/master/Code%20Examples/teams-api\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                data\n              </a>{\" \"}\n              came from a web design course.\n            </p>\n          </div>\n        </div>\n        <div className=\"author\">\n          <div className=\"authorLeft\">\n            <Controller>\n              <Scene\n                duration=\"80\"\n                triggerElement={\".descContent\"}\n                triggerHook=\"onLeave\"\n              >\n                <Tween\n                  from={{ xPercent: -300, ease: \"Strong.easeOut\" }}\n                  to={{ xPercent: 0, ease: \"Strong.easeOut\" }}\n                >\n                  <div className=\"wiperLeft\" />\n                </Tween>\n              </Scene>\n            </Controller>\n            <Controller>\n              <Scene\n                duration=\"100\"\n                triggerElement={\".descContent\"}\n                triggerHook=\"onLeave\"\n              >\n                <Tween\n                  from={{ autoAlpha: 0, xPercent: 35 }}\n                  to={{ autoAlpha: 1.2, xPercent: 0 }}\n                >\n                  <div className=\"authorDescription\">\n                    <h1 className=\"aboutFont\">About</h1>\n                    <h4>the author</h4>\n                    <h5>Sheng Hung Tsai</h5>\n                  </div>\n                </Tween>\n              </Scene>\n            </Controller>\n            <div className=\"contact\">\n              <ul>\n                <li>\n                  <a href=\"mailto:shenghone@gmail.com\">\n                    <i className=\"fas fa-envelope\" />\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"https://github.com/shenghone\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <i className=\"fab fa-github\" />\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"https://www.instagram.com/shenghone/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <i className=\"fab fa-instagram\" />\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"authorRight\">\n            <p>\n              &nbsp;I dedicate myself to becoming a fullstack web developer. I\n              love all the beautiful things made with codes. This is my very\n              first personal project to help myself dive deeper into React,\n              GraphQL and CSS.\n            </p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default about;\n","import React, { useEffect,useState } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { graphql } from \"react-apollo\";\nimport { meQuery } from \"../queries/queries\";\n\n\nconst privateRoute = ({data, component: Component, ...rest})=>{\n  const [loaded,setLoaded] = useState(false);\n  useEffect(()=>{\n    setLoaded(true)\n  },[])\n  const renderRoute=()=>{\n    if (!data || data.loading || !loaded) {\n      return null;\n    }\n    if (!data.Me && loaded) {\n      return <Redirect to=\"/login\" />;\n    }\n    return <Component {...rest} />;\n  }\n  return (\n    <Route {...rest} render={renderRoute}/>\n  )\n}\n\n\nexport default graphql(meQuery)(privateRoute);\n","import React, { Component } from \"react\";\nimport { graphql, compose } from \"react-apollo\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { loginMutation } from \"../queries/queries\";\n\nimport \"./login.css\";\n\nclass login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      authentication: this.props.authenticated,\n      errorMessage: \"\",\n      defaultAccount: \"demoaccount@gmail.com\",\n      defaultPassword: \"Mas!@#113\"\n    };\n  }\n\n  checkAuthStatus = () => {\n    if (this.state.authentication === true) {\n      this.props.history.push(\"/\");\n    }\n  };\n\n  componentDidMount() {\n    this.checkAuthStatus();\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n  verifyAuthStatus = arg => {\n    this.props.changeAuthCallFromChild(arg);\n  };\n\n  setErrorMessage = arg => {\n    this.setState({ errorMessage: arg });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.authenticated !== state.authentication) {\n      return {\n        authentication: props.authenticated\n      };\n    }\n    return null;\n  }\n\n  submitForm = async event => {\n    event.preventDefault();\n\n    if (!this.state.authentication) {\n      try {\n        const suc = await this.props.loginMutation({\n          variables: {\n            email: this.state.defaultAccount,\n            password: this.state.defaultPassword\n          }\n        });\n\n        if (suc) {\n          console.log(suc);\n          this.verifyAuthStatus(true);\n          this.props.history.push(\"/\");\n        }\n      } catch (err) {\n        this.setState({ errorMessage: \"Incorrect email or password.\" });\n      }\n    } else {\n      this.props.history.push(\"/\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"loginWrapper\">\n        <h2>Login</h2>\n        <p className=\"loginError\">{this.state.errorMessage}</p>\n        <form onSubmit={this.submitForm}>\n          <label>email</label>\n          <input\n            type=\"email\"\n            value={this.state.defaultAccount}\n            onChange={this.handleChange(\"defaultAccount\")}\n            required\n          />\n          <label>password</label>\n\n          <input\n            type=\"password\"\n            value={this.state.defaultPassword}\n            onChange={this.handleChange(\"defaultPassword\")}\n            required\n          />\n\n          <button className=\"submitButton\">submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  graphql(loginMutation, {\n    name: \"loginMutation\"\n  })\n)(login);\n","import React, { PureComponent } from \"react\";\n\n\n\nclass errorPage extends PureComponent {\n\n  render() {\n    return (\n      <div className=\"homeWrapper\">\n        <div\n\n        />\n        <div className=\"webDesc\">\n          <h3>\n            oops\n            <br />\n            nothing to see right here\n          </h3>\n        </div>\n        <div className=\"descText\">\n          <h4>The web app</h4>\n          <p>allows registered user to manage employees, projects and teams</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default errorPage;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { graphql } from \"react-apollo\";\nimport NavBar from \"./components/navbar/navbar\";\n\nimport Employees from \"./components/employees/employees\";\nimport Employee from \"./components/employees/employee/employee\";\nimport EmployeeForm from \"./components/employees/employee/employeeForm/employeeForm\";\n\nimport Projects from \"./components/projects/projects\";\nimport Project from \"./components/projects/project/project\";\nimport ProjectForm from \"./components/projects/project/projectForm/projectForm\";\nimport NewProject from \"./components/projects/newProject/newProjectForm\";\n\nimport Teams from \"./components/teams/teams\";\nimport Team from \"./components/teams/team/team\";\nimport TeamForm from \"./components/teams/team/teamForm/teamForm\";\nimport NewTeam from \"./components/teams/newTeam/newTeam\";\n\nimport Register from \"./components/register/register\";\nimport Footer from \"./components/footer/footer\";\nimport Home from \"./components/home/home\";\nimport About from \"./components/about/about\";\nimport PrivateRoute from \"./components/privatedRoute/privateRoute\";\nimport Login from \"./components/login/login\";\nimport ErrorPage from \"./components/errorPage/errorPage\";\nimport { meQuery } from \"./components/queries/queries\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      defaultAuth: false\n    };\n  }\n\n  componentDidMount() {\n    this.connecToServer();\n  }\n\n  connecToServer = () => {\n    fetch(\"/\");\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.checkAuth();\n    }\n  }\n\n  checkAuth = () => {\n    if (this.props.data.Me) {\n      this.setState({ defaultAuth: true });\n    }\n  };\n\n  changeAuthStatus = arg => {\n    this.setState({ defaultAuth: arg });\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div\n          className={\n            this.state.defaultAuth === true ? \"App brightApp\" : \"App darkApp\"\n          }\n        >\n          <NavBar\n            authenticated={this.state.defaultAuth}\n            changeAuthCallFromChild={this.changeAuthStatus}\n          />\n          <Switch>\n            <Route\n              exact\n              path=\"/login\"\n              component={() => (\n                <Login\n                  authenticated={this.state.defaultAuth}\n                  history={this.props.history}\n                  changeAuthCallFromChild={this.changeAuthStatus}\n                />\n              )}\n            />\n            <Route\n              path=\"/signup\"\n              exact\n              render={props => (\n                <Register\n                  changeAuthStatus={this.changeAuthStatus}\n                  defaultAuth={this.state.defaultAuth}\n                />\n              )}\n            />\n            <Route exact path=\"/\" component={Home} />\n            <Route\n              exact\n              path=\"/about\"\n              render={props => <About authenticated={this.state.defaultAuth} />}\n            />\n\n            <PrivateRoute\n              path=\"/team/edit/:teamId\"\n              exact\n              component={TeamForm}\n            />\n            <PrivateRoute path=\"/teams\" exact component={Teams} />\n            <PrivateRoute path=\"/team/new\" exact component={NewTeam} />\n            <PrivateRoute path=\"/team/:teamId\" exact component={Team} />\n\n            <PrivateRoute path=\"/project/new\" exact component={NewProject} />\n\n            <PrivateRoute\n              path=\"/project/edit/:projectId\"\n              exact\n              component={ProjectForm}\n            />\n            <PrivateRoute\n              path=\"/project/:projectId\"\n              exact\n              component={Project}\n            />\n            <PrivateRoute path=\"/employees\" exact component={Employees} />\n            <PrivateRoute\n              path=\"/employee/:employeeId\"\n              exact\n              component={Employee}\n            />\n            <PrivateRoute\n              path=\"/employee/edit/:employeeId\"\n              exact\n              component={EmployeeForm}\n            />\n            <PrivateRoute exact path=\"/projects\" component={Projects} />\n            <Route component={ErrorPage} />\n          </Switch>\n          <Footer />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default graphql(meQuery)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ApolloClient from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  link: createHttpLink({\n    uri: `${process.env.REACT_APP_BACK_END}/graphql`,\n    credentials: \"include\"\n  }),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}